//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SRSServices.SRSServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClientAPIServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ClientAPIService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RequestInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestTopupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTransactionStatusBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestPINOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentProductDiscountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentProductRebateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecentTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceVerifyTACOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCustomerStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCustomerTxStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback FBLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback FBUpdateFBIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FBUpdateMSISDNOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerInputListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerInputApproveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentSalesProfitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReloadPINOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReloadPINImmediateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSoftPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReloadSoftPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePushNotificationIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitBankInOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitBankInBiCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitServiceRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExChangeRateByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertMobileMoneymessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPinTxByDNOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataToReloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataReloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback WhatAppsInputOperationCompleted;
        
        private System.Threading.SendOrPostCallback WhatAppsOutputOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankInListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePrintCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBalanceExtraOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBalanceExtraOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProgramValidityOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClaimSRSPINServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTxOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageInfoListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClientAPIService() {
            this.Url = global::SRSServices.Properties.Settings.Default.SRSServices_SRSServer_ClientAPIService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RequestInputCompletedEventHandler RequestInputCompleted;
        
        /// <remarks/>
        public event RequestTopupCompletedEventHandler RequestTopupCompleted;
        
        /// <remarks/>
        public event CheckBalanceCompletedEventHandler CheckBalanceCompleted;
        
        /// <remarks/>
        public event CheckTransactionStatusCompletedEventHandler CheckTransactionStatusCompleted;
        
        /// <remarks/>
        public event CheckTransactionStatusBatchCompletedEventHandler CheckTransactionStatusBatchCompleted;
        
        /// <remarks/>
        public event RequestPINCompletedEventHandler RequestPINCompleted;
        
        /// <remarks/>
        public event GetProductCompletedEventHandler GetProductCompleted;
        
        /// <remarks/>
        public event GetProductObjectCompletedEventHandler GetProductObjectCompleted;
        
        /// <remarks/>
        public event GetAgentProductDiscountCompletedEventHandler GetAgentProductDiscountCompleted;
        
        /// <remarks/>
        public event GetAgentProductRebateCompletedEventHandler GetAgentProductRebateCompleted;
        
        /// <remarks/>
        public event GetRecentTransactionCompletedEventHandler GetRecentTransactionCompleted;
        
        /// <remarks/>
        public event DeviceLoginCompletedEventHandler DeviceLoginCompleted;
        
        /// <remarks/>
        public event DeviceVerifyTACCompletedEventHandler DeviceVerifyTACCompleted;
        
        /// <remarks/>
        public event CheckCustomerStatusCompletedEventHandler CheckCustomerStatusCompleted;
        
        /// <remarks/>
        public event CheckCustomerTxStatusCompletedEventHandler CheckCustomerTxStatusCompleted;
        
        /// <remarks/>
        public event RegisterDealerCompletedEventHandler RegisterDealerCompleted;
        
        /// <remarks/>
        public event FBLoginCompletedEventHandler FBLoginCompleted;
        
        /// <remarks/>
        public event FBUpdateFBIDCompletedEventHandler FBUpdateFBIDCompleted;
        
        /// <remarks/>
        public event FBUpdateMSISDNCompletedEventHandler FBUpdateMSISDNCompleted;
        
        /// <remarks/>
        public event CustomerInputCompletedEventHandler CustomerInputCompleted;
        
        /// <remarks/>
        public event CustomerInputListCompletedEventHandler CustomerInputListCompleted;
        
        /// <remarks/>
        public event CustomerInputApproveCompletedEventHandler CustomerInputApproveCompleted;
        
        /// <remarks/>
        public event GetAgentSalesCompletedEventHandler GetAgentSalesCompleted;
        
        /// <remarks/>
        public event GetAgentSalesProfitCompletedEventHandler GetAgentSalesProfitCompleted;
        
        /// <remarks/>
        public event GetMessageInfoCompletedEventHandler GetMessageInfoCompleted;
        
        /// <remarks/>
        public event LogLoginCompletedEventHandler LogLoginCompleted;
        
        /// <remarks/>
        public event GetReloadPINCompletedEventHandler GetReloadPINCompleted;
        
        /// <remarks/>
        public event GetReloadPINImmediateCompletedEventHandler GetReloadPINImmediateCompleted;
        
        /// <remarks/>
        public event PrintReceiptCompletedEventHandler PrintReceiptCompleted;
        
        /// <remarks/>
        public event CheckSoftPinCompletedEventHandler CheckSoftPinCompleted;
        
        /// <remarks/>
        public event ReloadSoftPinCompletedEventHandler ReloadSoftPinCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event UpdatePushNotificationIDCompletedEventHandler UpdatePushNotificationIDCompleted;
        
        /// <remarks/>
        public event SubmitBankInCompletedEventHandler SubmitBankInCompleted;
        
        /// <remarks/>
        public event SubmitBankInBiCodeCompletedEventHandler SubmitBankInBiCodeCompleted;
        
        /// <remarks/>
        public event SubmitServiceRegistrationCompletedEventHandler SubmitServiceRegistrationCompleted;
        
        /// <remarks/>
        public event GetAgentServerCompletedEventHandler GetAgentServerCompleted;
        
        /// <remarks/>
        public event GetExChangeRateByIdCompletedEventHandler GetExChangeRateByIdCompleted;
        
        /// <remarks/>
        public event InsertMobileMoneymessageCompletedEventHandler InsertMobileMoneymessageCompleted;
        
        /// <remarks/>
        public event GetPinTxByDNCompletedEventHandler GetPinTxByDNCompleted;
        
        /// <remarks/>
        public event GetDataToReloadCompletedEventHandler GetDataToReloadCompleted;
        
        /// <remarks/>
        public event UpdateDataReloadCompletedEventHandler UpdateDataReloadCompleted;
        
        /// <remarks/>
        public event WhatAppsInputCompletedEventHandler WhatAppsInputCompleted;
        
        /// <remarks/>
        public event WhatAppsOutputCompletedEventHandler WhatAppsOutputCompleted;
        
        /// <remarks/>
        public event GetBankInListCompletedEventHandler GetBankInListCompleted;
        
        /// <remarks/>
        public event UpdatePrintCountCompletedEventHandler UpdatePrintCountCompleted;
        
        /// <remarks/>
        public event SendSMSCompletedEventHandler SendSMSCompleted;
        
        /// <remarks/>
        public event CheckBalanceExtraCompletedEventHandler CheckBalanceExtraCompleted;
        
        /// <remarks/>
        public event UpdateBalanceExtraCompletedEventHandler UpdateBalanceExtraCompleted;
        
        /// <remarks/>
        public event CheckProgramValidityCompletedEventHandler CheckProgramValidityCompleted;
        
        /// <remarks/>
        public event ClaimSRSPINServerCompletedEventHandler ClaimSRSPINServerCompleted;
        
        /// <remarks/>
        public event GetProcessorInfoCompletedEventHandler GetProcessorInfoCompleted;
        
        /// <remarks/>
        public event GetTxOutCompletedEventHandler GetTxOutCompleted;
        
        /// <remarks/>
        public event GetMessageInfoListCompletedEventHandler GetMessageInfoListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RequestInput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RequestInput(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("RequestInput", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sResponseID,
                        sResponseStatus});
            sResponseID = ((string)(results[1]));
            sResponseStatus = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RequestInputAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sResponseID, string sResponseStatus) {
            this.RequestInputAsync(sClientUserName, sClientPassword, sClientTxID, sProductID, dProductPrice, sCustomerAccountNumber, sCustomerMobileNumber, sDealerMobileNumber, sRemark, sOtherParameter, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void RequestInputAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sResponseID, string sResponseStatus, object userState) {
            if ((this.RequestInputOperationCompleted == null)) {
                this.RequestInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestInputOperationCompleted);
            }
            this.InvokeAsync("RequestInput", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sResponseID,
                        sResponseStatus}, this.RequestInputOperationCompleted, userState);
        }
        
        private void OnRequestInputOperationCompleted(object arg) {
            if ((this.RequestInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestInputCompleted(this, new RequestInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RequestTopup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RequestTopup(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sTS, string sEncKey, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("RequestTopup", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sTS,
                        sEncKey,
                        sResponseID,
                        sResponseStatus});
            sResponseID = ((string)(results[1]));
            sResponseStatus = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RequestTopupAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sTS, string sEncKey, string sResponseID, string sResponseStatus) {
            this.RequestTopupAsync(sClientUserName, sClientPassword, sClientTxID, sProductID, dProductPrice, sCustomerAccountNumber, sCustomerMobileNumber, sDealerMobileNumber, sRemark, sOtherParameter, sTS, sEncKey, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void RequestTopupAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sTS, string sEncKey, string sResponseID, string sResponseStatus, object userState) {
            if ((this.RequestTopupOperationCompleted == null)) {
                this.RequestTopupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestTopupOperationCompleted);
            }
            this.InvokeAsync("RequestTopup", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sTS,
                        sEncKey,
                        sResponseID,
                        sResponseStatus}, this.RequestTopupOperationCompleted, userState);
        }
        
        private void OnRequestTopupOperationCompleted(object arg) {
            if ((this.RequestTopupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestTopupCompleted(this, new RequestTopupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBalance(string sClientUserName, string sClientPassword, ref decimal dBalance, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("CheckBalance", new object[] {
                        sClientUserName,
                        sClientPassword,
                        dBalance,
                        sResponseID,
                        sResponseStatus});
            dBalance = ((decimal)(results[1]));
            sResponseID = ((string)(results[2]));
            sResponseStatus = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBalanceAsync(string sClientUserName, string sClientPassword, decimal dBalance, string sResponseID, string sResponseStatus) {
            this.CheckBalanceAsync(sClientUserName, sClientPassword, dBalance, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void CheckBalanceAsync(string sClientUserName, string sClientPassword, decimal dBalance, string sResponseID, string sResponseStatus, object userState) {
            if ((this.CheckBalanceOperationCompleted == null)) {
                this.CheckBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBalanceOperationCompleted);
            }
            this.InvokeAsync("CheckBalance", new object[] {
                        sClientUserName,
                        sClientPassword,
                        dBalance,
                        sResponseID,
                        sResponseStatus}, this.CheckBalanceOperationCompleted, userState);
        }
        
        private void OnCheckBalanceOperationCompleted(object arg) {
            if ((this.CheckBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBalanceCompleted(this, new CheckBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTransactionStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckTransactionStatus(string sClientUserName, string sClientPassword, string sClientTxID, ref string sTransactionStatus, ref string sTransactionErrorCode, ref string sResponseID, ref string sResponseStatus, ref string sTransactionDNReceivedID) {
            object[] results = this.Invoke("CheckTransactionStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sTransactionStatus,
                        sTransactionErrorCode,
                        sResponseID,
                        sResponseStatus,
                        sTransactionDNReceivedID});
            sTransactionStatus = ((string)(results[1]));
            sTransactionErrorCode = ((string)(results[2]));
            sResponseID = ((string)(results[3]));
            sResponseStatus = ((string)(results[4]));
            sTransactionDNReceivedID = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTransactionStatusAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sTransactionStatus, string sTransactionErrorCode, string sResponseID, string sResponseStatus, string sTransactionDNReceivedID) {
            this.CheckTransactionStatusAsync(sClientUserName, sClientPassword, sClientTxID, sTransactionStatus, sTransactionErrorCode, sResponseID, sResponseStatus, sTransactionDNReceivedID, null);
        }
        
        /// <remarks/>
        public void CheckTransactionStatusAsync(string sClientUserName, string sClientPassword, string sClientTxID, string sTransactionStatus, string sTransactionErrorCode, string sResponseID, string sResponseStatus, string sTransactionDNReceivedID, object userState) {
            if ((this.CheckTransactionStatusOperationCompleted == null)) {
                this.CheckTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("CheckTransactionStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientTxID,
                        sTransactionStatus,
                        sTransactionErrorCode,
                        sResponseID,
                        sResponseStatus,
                        sTransactionDNReceivedID}, this.CheckTransactionStatusOperationCompleted, userState);
        }
        
        private void OnCheckTransactionStatusOperationCompleted(object arg) {
            if ((this.CheckTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTransactionStatusCompleted(this, new CheckTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckTransactionStatusBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransactionStatus[] CheckTransactionStatusBatch(string sClientUserName, string sClientPassword, TransactionStatus[] olTS) {
            object[] results = this.Invoke("CheckTransactionStatusBatch", new object[] {
                        sClientUserName,
                        sClientPassword,
                        olTS});
            return ((TransactionStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckTransactionStatusBatchAsync(string sClientUserName, string sClientPassword, TransactionStatus[] olTS) {
            this.CheckTransactionStatusBatchAsync(sClientUserName, sClientPassword, olTS, null);
        }
        
        /// <remarks/>
        public void CheckTransactionStatusBatchAsync(string sClientUserName, string sClientPassword, TransactionStatus[] olTS, object userState) {
            if ((this.CheckTransactionStatusBatchOperationCompleted == null)) {
                this.CheckTransactionStatusBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTransactionStatusBatchOperationCompleted);
            }
            this.InvokeAsync("CheckTransactionStatusBatch", new object[] {
                        sClientUserName,
                        sClientPassword,
                        olTS}, this.CheckTransactionStatusBatchOperationCompleted, userState);
        }
        
        private void OnCheckTransactionStatusBatchOperationCompleted(object arg) {
            if ((this.CheckTransactionStatusBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTransactionStatusBatchCompleted(this, new CheckTransactionStatusBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RequestPIN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RequestPIN(string sClientUserName, string sClientPassword, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, ref string sResponseID, ref string sResponseStatus, ref string sSerialNo, ref string sSoftPIN, ref string sInstruction, ref string sDescription) {
            object[] results = this.Invoke("RequestPIN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sResponseID,
                        sResponseStatus,
                        sSerialNo,
                        sSoftPIN,
                        sInstruction,
                        sDescription});
            sResponseID = ((string)(results[1]));
            sResponseStatus = ((string)(results[2]));
            sSerialNo = ((string)(results[3]));
            sSoftPIN = ((string)(results[4]));
            sInstruction = ((string)(results[5]));
            sDescription = ((string)(results[6]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RequestPINAsync(string sClientUserName, string sClientPassword, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sResponseID, string sResponseStatus, string sSerialNo, string sSoftPIN, string sInstruction, string sDescription) {
            this.RequestPINAsync(sClientUserName, sClientPassword, sProductID, dProductPrice, sCustomerAccountNumber, sCustomerMobileNumber, sDealerMobileNumber, sRemark, sOtherParameter, sResponseID, sResponseStatus, sSerialNo, sSoftPIN, sInstruction, sDescription, null);
        }
        
        /// <remarks/>
        public void RequestPINAsync(
                    string sClientUserName, 
                    string sClientPassword, 
                    string sProductID, 
                    decimal dProductPrice, 
                    string sCustomerAccountNumber, 
                    string sCustomerMobileNumber, 
                    string sDealerMobileNumber, 
                    string sRemark, 
                    string sOtherParameter, 
                    string sResponseID, 
                    string sResponseStatus, 
                    string sSerialNo, 
                    string sSoftPIN, 
                    string sInstruction, 
                    string sDescription, 
                    object userState) {
            if ((this.RequestPINOperationCompleted == null)) {
                this.RequestPINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestPINOperationCompleted);
            }
            this.InvokeAsync("RequestPIN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sResponseID,
                        sResponseStatus,
                        sSerialNo,
                        sSoftPIN,
                        sInstruction,
                        sDescription}, this.RequestPINOperationCompleted, userState);
        }
        
        private void OnRequestPINOperationCompleted(object arg) {
            if ((this.RequestPINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestPINCompleted(this, new RequestPINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProduct", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetProduct(string sClientUserName, string sClientPassword, ref string[] sProductID, ref string[] sProductName, ref string[] sProductDenomination, ref string[] sProductDescription, ref string[] sProductInstruction, ref string[] sProductStatus) {
            object[] results = this.Invoke("GetProduct", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        sProductName,
                        sProductDenomination,
                        sProductDescription,
                        sProductInstruction,
                        sProductStatus});
            sProductID = ((string[])(results[1]));
            sProductName = ((string[])(results[2]));
            sProductDenomination = ((string[])(results[3]));
            sProductDescription = ((string[])(results[4]));
            sProductInstruction = ((string[])(results[5]));
            sProductStatus = ((string[])(results[6]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductAsync(string sClientUserName, string sClientPassword, string[] sProductID, string[] sProductName, string[] sProductDenomination, string[] sProductDescription, string[] sProductInstruction, string[] sProductStatus) {
            this.GetProductAsync(sClientUserName, sClientPassword, sProductID, sProductName, sProductDenomination, sProductDescription, sProductInstruction, sProductStatus, null);
        }
        
        /// <remarks/>
        public void GetProductAsync(string sClientUserName, string sClientPassword, string[] sProductID, string[] sProductName, string[] sProductDenomination, string[] sProductDescription, string[] sProductInstruction, string[] sProductStatus, object userState) {
            if ((this.GetProductOperationCompleted == null)) {
                this.GetProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductOperationCompleted);
            }
            this.InvokeAsync("GetProduct", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        sProductName,
                        sProductDenomination,
                        sProductDescription,
                        sProductInstruction,
                        sProductStatus}, this.GetProductOperationCompleted, userState);
        }
        
        private void OnGetProductOperationCompleted(object arg) {
            if ((this.GetProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductCompleted(this, new GetProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductInfo[] GetProductObject(string sClientUserName, string sClientPassword) {
            object[] results = this.Invoke("GetProductObject", new object[] {
                        sClientUserName,
                        sClientPassword});
            return ((ProductInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProductObjectAsync(string sClientUserName, string sClientPassword) {
            this.GetProductObjectAsync(sClientUserName, sClientPassword, null);
        }
        
        /// <remarks/>
        public void GetProductObjectAsync(string sClientUserName, string sClientPassword, object userState) {
            if ((this.GetProductObjectOperationCompleted == null)) {
                this.GetProductObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductObjectOperationCompleted);
            }
            this.InvokeAsync("GetProductObject", new object[] {
                        sClientUserName,
                        sClientPassword}, this.GetProductObjectOperationCompleted, userState);
        }
        
        private void OnGetProductObjectOperationCompleted(object arg) {
            if ((this.GetProductObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductObjectCompleted(this, new GetProductObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentProductDiscount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AgentProductDiscount[] GetAgentProductDiscount(string sClientUserName, string sClientPassword) {
            object[] results = this.Invoke("GetAgentProductDiscount", new object[] {
                        sClientUserName,
                        sClientPassword});
            return ((AgentProductDiscount[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentProductDiscountAsync(string sClientUserName, string sClientPassword) {
            this.GetAgentProductDiscountAsync(sClientUserName, sClientPassword, null);
        }
        
        /// <remarks/>
        public void GetAgentProductDiscountAsync(string sClientUserName, string sClientPassword, object userState) {
            if ((this.GetAgentProductDiscountOperationCompleted == null)) {
                this.GetAgentProductDiscountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentProductDiscountOperationCompleted);
            }
            this.InvokeAsync("GetAgentProductDiscount", new object[] {
                        sClientUserName,
                        sClientPassword}, this.GetAgentProductDiscountOperationCompleted, userState);
        }
        
        private void OnGetAgentProductDiscountOperationCompleted(object arg) {
            if ((this.GetAgentProductDiscountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentProductDiscountCompleted(this, new GetAgentProductDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentProductRebate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AgentProductRebate[] GetAgentProductRebate(string sClientUserName, string sClientPassword, string sProductID) {
            object[] results = this.Invoke("GetAgentProductRebate", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID});
            return ((AgentProductRebate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentProductRebateAsync(string sClientUserName, string sClientPassword, string sProductID) {
            this.GetAgentProductRebateAsync(sClientUserName, sClientPassword, sProductID, null);
        }
        
        /// <remarks/>
        public void GetAgentProductRebateAsync(string sClientUserName, string sClientPassword, string sProductID, object userState) {
            if ((this.GetAgentProductRebateOperationCompleted == null)) {
                this.GetAgentProductRebateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentProductRebateOperationCompleted);
            }
            this.InvokeAsync("GetAgentProductRebate", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID}, this.GetAgentProductRebateOperationCompleted, userState);
        }
        
        private void OnGetAgentProductRebateOperationCompleted(object arg) {
            if ((this.GetAgentProductRebateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentProductRebateCompleted(this, new GetAgentProductRebateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRecentTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetRecentTransaction(string sClientUserName, string sClientPassword, ref string[] sReloadNumber, ref string[] sReloadAmount, ref string[] sStatus, ref string[] sDN, ref string[] sReloadTelco, ref string[] sCode) {
            object[] results = this.Invoke("GetRecentTransaction", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sReloadNumber,
                        sReloadAmount,
                        sStatus,
                        sDN,
                        sReloadTelco,
                        sCode});
            sReloadNumber = ((string[])(results[1]));
            sReloadAmount = ((string[])(results[2]));
            sStatus = ((string[])(results[3]));
            sDN = ((string[])(results[4]));
            sReloadTelco = ((string[])(results[5]));
            sCode = ((string[])(results[6]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecentTransactionAsync(string sClientUserName, string sClientPassword, string[] sReloadNumber, string[] sReloadAmount, string[] sStatus, string[] sDN, string[] sReloadTelco, string[] sCode) {
            this.GetRecentTransactionAsync(sClientUserName, sClientPassword, sReloadNumber, sReloadAmount, sStatus, sDN, sReloadTelco, sCode, null);
        }
        
        /// <remarks/>
        public void GetRecentTransactionAsync(string sClientUserName, string sClientPassword, string[] sReloadNumber, string[] sReloadAmount, string[] sStatus, string[] sDN, string[] sReloadTelco, string[] sCode, object userState) {
            if ((this.GetRecentTransactionOperationCompleted == null)) {
                this.GetRecentTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecentTransactionOperationCompleted);
            }
            this.InvokeAsync("GetRecentTransaction", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sReloadNumber,
                        sReloadAmount,
                        sStatus,
                        sDN,
                        sReloadTelco,
                        sCode}, this.GetRecentTransactionOperationCompleted, userState);
        }
        
        private void OnGetRecentTransactionOperationCompleted(object arg) {
            if ((this.GetRecentTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecentTransactionCompleted(this, new GetRecentTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeviceLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeviceLogin(string sClientUserName, string sClientPassword, string sDeviceID, ref string sClientID, ref bool bVerifyTac, ref string sMasterID, ref string sMerchantName) {
            object[] results = this.Invoke("DeviceLogin", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sDeviceID,
                        sClientID,
                        bVerifyTac,
                        sMasterID,
                        sMerchantName});
            sClientID = ((string)(results[1]));
            bVerifyTac = ((bool)(results[2]));
            sMasterID = ((string)(results[3]));
            sMerchantName = ((string)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceLoginAsync(string sClientUserName, string sClientPassword, string sDeviceID, string sClientID, bool bVerifyTac, string sMasterID, string sMerchantName) {
            this.DeviceLoginAsync(sClientUserName, sClientPassword, sDeviceID, sClientID, bVerifyTac, sMasterID, sMerchantName, null);
        }
        
        /// <remarks/>
        public void DeviceLoginAsync(string sClientUserName, string sClientPassword, string sDeviceID, string sClientID, bool bVerifyTac, string sMasterID, string sMerchantName, object userState) {
            if ((this.DeviceLoginOperationCompleted == null)) {
                this.DeviceLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceLoginOperationCompleted);
            }
            this.InvokeAsync("DeviceLogin", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sDeviceID,
                        sClientID,
                        bVerifyTac,
                        sMasterID,
                        sMerchantName}, this.DeviceLoginOperationCompleted, userState);
        }
        
        private void OnDeviceLoginOperationCompleted(object arg) {
            if ((this.DeviceLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceLoginCompleted(this, new DeviceLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeviceVerifyTAC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeviceVerifyTAC(string sClientUserName, string sClientPassword, string sClientID, string sDeviceID, string sTAC) {
            object[] results = this.Invoke("DeviceVerifyTAC", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientID,
                        sDeviceID,
                        sTAC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceVerifyTACAsync(string sClientUserName, string sClientPassword, string sClientID, string sDeviceID, string sTAC) {
            this.DeviceVerifyTACAsync(sClientUserName, sClientPassword, sClientID, sDeviceID, sTAC, null);
        }
        
        /// <remarks/>
        public void DeviceVerifyTACAsync(string sClientUserName, string sClientPassword, string sClientID, string sDeviceID, string sTAC, object userState) {
            if ((this.DeviceVerifyTACOperationCompleted == null)) {
                this.DeviceVerifyTACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceVerifyTACOperationCompleted);
            }
            this.InvokeAsync("DeviceVerifyTAC", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientID,
                        sDeviceID,
                        sTAC}, this.DeviceVerifyTACOperationCompleted, userState);
        }
        
        private void OnDeviceVerifyTACOperationCompleted(object arg) {
            if ((this.DeviceVerifyTACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceVerifyTACCompleted(this, new DeviceVerifyTACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckCustomerStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckCustomerStatus(string sClientUserName, string sClientPassword, string sCustomerAccount, ref string[] sProduct, ref string[] sAmount, ref string[] sStatus, ref string[] sDN, ref string[] sCode) {
            object[] results = this.Invoke("CheckCustomerStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sProduct,
                        sAmount,
                        sStatus,
                        sDN,
                        sCode});
            sProduct = ((string[])(results[1]));
            sAmount = ((string[])(results[2]));
            sStatus = ((string[])(results[3]));
            sDN = ((string[])(results[4]));
            sCode = ((string[])(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCustomerStatusAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string[] sProduct, string[] sAmount, string[] sStatus, string[] sDN, string[] sCode) {
            this.CheckCustomerStatusAsync(sClientUserName, sClientPassword, sCustomerAccount, sProduct, sAmount, sStatus, sDN, sCode, null);
        }
        
        /// <remarks/>
        public void CheckCustomerStatusAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string[] sProduct, string[] sAmount, string[] sStatus, string[] sDN, string[] sCode, object userState) {
            if ((this.CheckCustomerStatusOperationCompleted == null)) {
                this.CheckCustomerStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCustomerStatusOperationCompleted);
            }
            this.InvokeAsync("CheckCustomerStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sProduct,
                        sAmount,
                        sStatus,
                        sDN,
                        sCode}, this.CheckCustomerStatusOperationCompleted, userState);
        }
        
        private void OnCheckCustomerStatusOperationCompleted(object arg) {
            if ((this.CheckCustomerStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCustomerStatusCompleted(this, new CheckCustomerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckCustomerTxStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerTxStatus[] CheckCustomerTxStatus(string sClientUserName, string sClientPassword, string sCustomerAccount, string sSDate, string sEDate) {
            object[] results = this.Invoke("CheckCustomerTxStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sSDate,
                        sEDate});
            return ((CustomerTxStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckCustomerTxStatusAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string sSDate, string sEDate) {
            this.CheckCustomerTxStatusAsync(sClientUserName, sClientPassword, sCustomerAccount, sSDate, sEDate, null);
        }
        
        /// <remarks/>
        public void CheckCustomerTxStatusAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string sSDate, string sEDate, object userState) {
            if ((this.CheckCustomerTxStatusOperationCompleted == null)) {
                this.CheckCustomerTxStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCustomerTxStatusOperationCompleted);
            }
            this.InvokeAsync("CheckCustomerTxStatus", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sSDate,
                        sEDate}, this.CheckCustomerTxStatusOperationCompleted, userState);
        }
        
        private void OnCheckCustomerTxStatusOperationCompleted(object arg) {
            if ((this.CheckCustomerTxStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCustomerTxStatusCompleted(this, new CheckCustomerTxStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterDealer(string sName, string sMobileNumber, string sLocation, string sReferrer, string sEmail, string sTS, string sEncKey, ref string sResponseMessage) {
            object[] results = this.Invoke("RegisterDealer", new object[] {
                        sName,
                        sMobileNumber,
                        sLocation,
                        sReferrer,
                        sEmail,
                        sTS,
                        sEncKey,
                        sResponseMessage});
            sResponseMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterDealerAsync(string sName, string sMobileNumber, string sLocation, string sReferrer, string sEmail, string sTS, string sEncKey, string sResponseMessage) {
            this.RegisterDealerAsync(sName, sMobileNumber, sLocation, sReferrer, sEmail, sTS, sEncKey, sResponseMessage, null);
        }
        
        /// <remarks/>
        public void RegisterDealerAsync(string sName, string sMobileNumber, string sLocation, string sReferrer, string sEmail, string sTS, string sEncKey, string sResponseMessage, object userState) {
            if ((this.RegisterDealerOperationCompleted == null)) {
                this.RegisterDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterDealerOperationCompleted);
            }
            this.InvokeAsync("RegisterDealer", new object[] {
                        sName,
                        sMobileNumber,
                        sLocation,
                        sReferrer,
                        sEmail,
                        sTS,
                        sEncKey,
                        sResponseMessage}, this.RegisterDealerOperationCompleted, userState);
        }
        
        private void OnRegisterDealerOperationCompleted(object arg) {
            if ((this.RegisterDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterDealerCompleted(this, new RegisterDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FBLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FBLogin(string FBName, string FBID, string FBEmail, string sTS, string sEncKey, ref string sAgentID, ref string sMSISDN, ref bool bTACverified, ref string sPassword, ref string sResponseMessage) {
            object[] results = this.Invoke("FBLogin", new object[] {
                        FBName,
                        FBID,
                        FBEmail,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sMSISDN,
                        bTACverified,
                        sPassword,
                        sResponseMessage});
            sAgentID = ((string)(results[1]));
            sMSISDN = ((string)(results[2]));
            bTACverified = ((bool)(results[3]));
            sPassword = ((string)(results[4]));
            sResponseMessage = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FBLoginAsync(string FBName, string FBID, string FBEmail, string sTS, string sEncKey, string sAgentID, string sMSISDN, bool bTACverified, string sPassword, string sResponseMessage) {
            this.FBLoginAsync(FBName, FBID, FBEmail, sTS, sEncKey, sAgentID, sMSISDN, bTACverified, sPassword, sResponseMessage, null);
        }
        
        /// <remarks/>
        public void FBLoginAsync(string FBName, string FBID, string FBEmail, string sTS, string sEncKey, string sAgentID, string sMSISDN, bool bTACverified, string sPassword, string sResponseMessage, object userState) {
            if ((this.FBLoginOperationCompleted == null)) {
                this.FBLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFBLoginOperationCompleted);
            }
            this.InvokeAsync("FBLogin", new object[] {
                        FBName,
                        FBID,
                        FBEmail,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sMSISDN,
                        bTACverified,
                        sPassword,
                        sResponseMessage}, this.FBLoginOperationCompleted, userState);
        }
        
        private void OnFBLoginOperationCompleted(object arg) {
            if ((this.FBLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FBLoginCompleted(this, new FBLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FBUpdateFBID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FBUpdateFBID(string sFBID, string sAgentID, string sMobileNumber, string sPassword, string sTS, string sEncKey, ref string sResponseMessage) {
            object[] results = this.Invoke("FBUpdateFBID", new object[] {
                        sFBID,
                        sAgentID,
                        sMobileNumber,
                        sPassword,
                        sTS,
                        sEncKey,
                        sResponseMessage});
            sResponseMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FBUpdateFBIDAsync(string sFBID, string sAgentID, string sMobileNumber, string sPassword, string sTS, string sEncKey, string sResponseMessage) {
            this.FBUpdateFBIDAsync(sFBID, sAgentID, sMobileNumber, sPassword, sTS, sEncKey, sResponseMessage, null);
        }
        
        /// <remarks/>
        public void FBUpdateFBIDAsync(string sFBID, string sAgentID, string sMobileNumber, string sPassword, string sTS, string sEncKey, string sResponseMessage, object userState) {
            if ((this.FBUpdateFBIDOperationCompleted == null)) {
                this.FBUpdateFBIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFBUpdateFBIDOperationCompleted);
            }
            this.InvokeAsync("FBUpdateFBID", new object[] {
                        sFBID,
                        sAgentID,
                        sMobileNumber,
                        sPassword,
                        sTS,
                        sEncKey,
                        sResponseMessage}, this.FBUpdateFBIDOperationCompleted, userState);
        }
        
        private void OnFBUpdateFBIDOperationCompleted(object arg) {
            if ((this.FBUpdateFBIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FBUpdateFBIDCompleted(this, new FBUpdateFBIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FBUpdateMSISDN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FBUpdateMSISDN(string FBID, string FBMsisdn, string sTS, string sEncKey, string sAgentID, string sPassword, ref bool bTACverified, ref string sResponseMessage) {
            object[] results = this.Invoke("FBUpdateMSISDN", new object[] {
                        FBID,
                        FBMsisdn,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sPassword,
                        bTACverified,
                        sResponseMessage});
            bTACverified = ((bool)(results[1]));
            sResponseMessage = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FBUpdateMSISDNAsync(string FBID, string FBMsisdn, string sTS, string sEncKey, string sAgentID, string sPassword, bool bTACverified, string sResponseMessage) {
            this.FBUpdateMSISDNAsync(FBID, FBMsisdn, sTS, sEncKey, sAgentID, sPassword, bTACverified, sResponseMessage, null);
        }
        
        /// <remarks/>
        public void FBUpdateMSISDNAsync(string FBID, string FBMsisdn, string sTS, string sEncKey, string sAgentID, string sPassword, bool bTACverified, string sResponseMessage, object userState) {
            if ((this.FBUpdateMSISDNOperationCompleted == null)) {
                this.FBUpdateMSISDNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFBUpdateMSISDNOperationCompleted);
            }
            this.InvokeAsync("FBUpdateMSISDN", new object[] {
                        FBID,
                        FBMsisdn,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sPassword,
                        bTACverified,
                        sResponseMessage}, this.FBUpdateMSISDNOperationCompleted, userState);
        }
        
        private void OnFBUpdateMSISDNOperationCompleted(object arg) {
            if ((this.FBUpdateMSISDNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FBUpdateMSISDNCompleted(this, new FBUpdateMSISDNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerInput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CustomerInput(string sClientUserName, string sClientPassword, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, ref string sTicketNumber, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("CustomerInput", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sTicketNumber,
                        sResponseID,
                        sResponseStatus});
            sTicketNumber = ((string)(results[1]));
            sResponseID = ((string)(results[2]));
            sResponseStatus = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerInputAsync(string sClientUserName, string sClientPassword, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sTicketNumber, string sResponseID, string sResponseStatus) {
            this.CustomerInputAsync(sClientUserName, sClientPassword, sProductID, dProductPrice, sCustomerAccountNumber, sCustomerMobileNumber, sDealerMobileNumber, sRemark, sOtherParameter, sTicketNumber, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void CustomerInputAsync(string sClientUserName, string sClientPassword, string sProductID, decimal dProductPrice, string sCustomerAccountNumber, string sCustomerMobileNumber, string sDealerMobileNumber, string sRemark, string sOtherParameter, string sTicketNumber, string sResponseID, string sResponseStatus, object userState) {
            if ((this.CustomerInputOperationCompleted == null)) {
                this.CustomerInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerInputOperationCompleted);
            }
            this.InvokeAsync("CustomerInput", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sProductID,
                        dProductPrice,
                        sCustomerAccountNumber,
                        sCustomerMobileNumber,
                        sDealerMobileNumber,
                        sRemark,
                        sOtherParameter,
                        sTicketNumber,
                        sResponseID,
                        sResponseStatus}, this.CustomerInputOperationCompleted, userState);
        }
        
        private void OnCustomerInputOperationCompleted(object arg) {
            if ((this.CustomerInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerInputCompleted(this, new CustomerInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerInputList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerInputList[] CustomerInputList(string sClientUserName, string sClientPassword, string sListType, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("CustomerInputList", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sListType,
                        sResponseID,
                        sResponseStatus});
            sResponseID = ((string)(results[1]));
            sResponseStatus = ((string)(results[2]));
            return ((CustomerInputList[])(results[0]));
        }
        
        /// <remarks/>
        public void CustomerInputListAsync(string sClientUserName, string sClientPassword, string sListType, string sResponseID, string sResponseStatus) {
            this.CustomerInputListAsync(sClientUserName, sClientPassword, sListType, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void CustomerInputListAsync(string sClientUserName, string sClientPassword, string sListType, string sResponseID, string sResponseStatus, object userState) {
            if ((this.CustomerInputListOperationCompleted == null)) {
                this.CustomerInputListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerInputListOperationCompleted);
            }
            this.InvokeAsync("CustomerInputList", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sListType,
                        sResponseID,
                        sResponseStatus}, this.CustomerInputListOperationCompleted, userState);
        }
        
        private void OnCustomerInputListOperationCompleted(object arg) {
            if ((this.CustomerInputListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerInputListCompleted(this, new CustomerInputListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerInputApprove", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CustomerInputApprove(string sClientUserName, string sClientPassword, string sAction, ref string sTxID, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("CustomerInputApprove", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sAction,
                        sTxID,
                        sResponseID,
                        sResponseStatus});
            sTxID = ((string)(results[1]));
            sResponseID = ((string)(results[2]));
            sResponseStatus = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerInputApproveAsync(string sClientUserName, string sClientPassword, string sAction, string sTxID, string sResponseID, string sResponseStatus) {
            this.CustomerInputApproveAsync(sClientUserName, sClientPassword, sAction, sTxID, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void CustomerInputApproveAsync(string sClientUserName, string sClientPassword, string sAction, string sTxID, string sResponseID, string sResponseStatus, object userState) {
            if ((this.CustomerInputApproveOperationCompleted == null)) {
                this.CustomerInputApproveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerInputApproveOperationCompleted);
            }
            this.InvokeAsync("CustomerInputApprove", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sAction,
                        sTxID,
                        sResponseID,
                        sResponseStatus}, this.CustomerInputApproveOperationCompleted, userState);
        }
        
        private void OnCustomerInputApproveOperationCompleted(object arg) {
            if ((this.CustomerInputApproveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerInputApproveCompleted(this, new CustomerInputApproveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentSales", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AgentSales[] GetAgentSales(string sClientUserName, string sClientPassword, string sSDate, string sEDate) {
            object[] results = this.Invoke("GetAgentSales", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sSDate,
                        sEDate});
            return ((AgentSales[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentSalesAsync(string sClientUserName, string sClientPassword, string sSDate, string sEDate) {
            this.GetAgentSalesAsync(sClientUserName, sClientPassword, sSDate, sEDate, null);
        }
        
        /// <remarks/>
        public void GetAgentSalesAsync(string sClientUserName, string sClientPassword, string sSDate, string sEDate, object userState) {
            if ((this.GetAgentSalesOperationCompleted == null)) {
                this.GetAgentSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentSalesOperationCompleted);
            }
            this.InvokeAsync("GetAgentSales", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sSDate,
                        sEDate}, this.GetAgentSalesOperationCompleted, userState);
        }
        
        private void OnGetAgentSalesOperationCompleted(object arg) {
            if ((this.GetAgentSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentSalesCompleted(this, new GetAgentSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentSalesProfit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAgentSalesProfit(string sClientUserName, string sClientPassword, string sSDate, string sEDate) {
            object[] results = this.Invoke("GetAgentSalesProfit", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sSDate,
                        sEDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentSalesProfitAsync(string sClientUserName, string sClientPassword, string sSDate, string sEDate) {
            this.GetAgentSalesProfitAsync(sClientUserName, sClientPassword, sSDate, sEDate, null);
        }
        
        /// <remarks/>
        public void GetAgentSalesProfitAsync(string sClientUserName, string sClientPassword, string sSDate, string sEDate, object userState) {
            if ((this.GetAgentSalesProfitOperationCompleted == null)) {
                this.GetAgentSalesProfitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentSalesProfitOperationCompleted);
            }
            this.InvokeAsync("GetAgentSalesProfit", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sSDate,
                        sEDate}, this.GetAgentSalesProfitOperationCompleted, userState);
        }
        
        private void OnGetAgentSalesProfitOperationCompleted(object arg) {
            if ((this.GetAgentSalesProfitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentSalesProfitCompleted(this, new GetAgentSalesProfitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessageInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetMessageInfo(string sClientUserName, string sClientPassword, string sMessageType, ref string sResponseMessage) {
            object[] results = this.Invoke("GetMessageInfo", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sMessageType,
                        sResponseMessage});
            sResponseMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageInfoAsync(string sClientUserName, string sClientPassword, string sMessageType, string sResponseMessage) {
            this.GetMessageInfoAsync(sClientUserName, sClientPassword, sMessageType, sResponseMessage, null);
        }
        
        /// <remarks/>
        public void GetMessageInfoAsync(string sClientUserName, string sClientPassword, string sMessageType, string sResponseMessage, object userState) {
            if ((this.GetMessageInfoOperationCompleted == null)) {
                this.GetMessageInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageInfoOperationCompleted);
            }
            this.InvokeAsync("GetMessageInfo", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sMessageType,
                        sResponseMessage}, this.GetMessageInfoOperationCompleted, userState);
        }
        
        private void OnGetMessageInfoOperationCompleted(object arg) {
            if ((this.GetMessageInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageInfoCompleted(this, new GetMessageInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogLogin(string sClientUserName, string sClientPassword, string IPAddress, string LoginStatus, string LoginChannel, string sGPSLocation) {
            object[] results = this.Invoke("LogLogin", new object[] {
                        sClientUserName,
                        sClientPassword,
                        IPAddress,
                        LoginStatus,
                        LoginChannel,
                        sGPSLocation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogLoginAsync(string sClientUserName, string sClientPassword, string IPAddress, string LoginStatus, string LoginChannel, string sGPSLocation) {
            this.LogLoginAsync(sClientUserName, sClientPassword, IPAddress, LoginStatus, LoginChannel, sGPSLocation, null);
        }
        
        /// <remarks/>
        public void LogLoginAsync(string sClientUserName, string sClientPassword, string IPAddress, string LoginStatus, string LoginChannel, string sGPSLocation, object userState) {
            if ((this.LogLoginOperationCompleted == null)) {
                this.LogLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogLoginOperationCompleted);
            }
            this.InvokeAsync("LogLogin", new object[] {
                        sClientUserName,
                        sClientPassword,
                        IPAddress,
                        LoginStatus,
                        LoginChannel,
                        sGPSLocation}, this.LogLoginOperationCompleted, userState);
        }
        
        private void OnLogLoginOperationCompleted(object arg) {
            if ((this.LogLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogLoginCompleted(this, new LogLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReloadPIN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReloadPIN(string sClientUserName, string sClientPassword, string sLocalMOID, ref string sSerialNumber, ref string sReloadPin, ref string sExpiryDate, ref string sReloadTelco, ref string sAmount, ref string sInstruction, ref string sDescription, ref string sPurchaseTS, ref string sPINID, ref string sRetailPrice) {
            object[] results = this.Invoke("GetReloadPIN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sSerialNumber,
                        sReloadPin,
                        sExpiryDate,
                        sReloadTelco,
                        sAmount,
                        sInstruction,
                        sDescription,
                        sPurchaseTS,
                        sPINID,
                        sRetailPrice});
            sSerialNumber = ((string)(results[1]));
            sReloadPin = ((string)(results[2]));
            sExpiryDate = ((string)(results[3]));
            sReloadTelco = ((string)(results[4]));
            sAmount = ((string)(results[5]));
            sInstruction = ((string)(results[6]));
            sDescription = ((string)(results[7]));
            sPurchaseTS = ((string)(results[8]));
            sPINID = ((string)(results[9]));
            sRetailPrice = ((string)(results[10]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetReloadPINAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sSerialNumber, string sReloadPin, string sExpiryDate, string sReloadTelco, string sAmount, string sInstruction, string sDescription, string sPurchaseTS, string sPINID, string sRetailPrice) {
            this.GetReloadPINAsync(sClientUserName, sClientPassword, sLocalMOID, sSerialNumber, sReloadPin, sExpiryDate, sReloadTelco, sAmount, sInstruction, sDescription, sPurchaseTS, sPINID, sRetailPrice, null);
        }
        
        /// <remarks/>
        public void GetReloadPINAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sSerialNumber, string sReloadPin, string sExpiryDate, string sReloadTelco, string sAmount, string sInstruction, string sDescription, string sPurchaseTS, string sPINID, string sRetailPrice, object userState) {
            if ((this.GetReloadPINOperationCompleted == null)) {
                this.GetReloadPINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReloadPINOperationCompleted);
            }
            this.InvokeAsync("GetReloadPIN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sSerialNumber,
                        sReloadPin,
                        sExpiryDate,
                        sReloadTelco,
                        sAmount,
                        sInstruction,
                        sDescription,
                        sPurchaseTS,
                        sPINID,
                        sRetailPrice}, this.GetReloadPINOperationCompleted, userState);
        }
        
        private void OnGetReloadPINOperationCompleted(object arg) {
            if ((this.GetReloadPINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReloadPINCompleted(this, new GetReloadPINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReloadPINImmediate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReloadPINImmediate(string sClientUserName, string sClientPassword, string sLocalMOID, ref string sSerialNumber, ref string sReloadPin, ref string sExpiryDate, ref string sReloadTelco, ref string sAmount, ref string sDNReceivedID, ref string sInstruction, ref string sDescription, ref string sBatchID) {
            object[] results = this.Invoke("GetReloadPINImmediate", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sSerialNumber,
                        sReloadPin,
                        sExpiryDate,
                        sReloadTelco,
                        sAmount,
                        sDNReceivedID,
                        sInstruction,
                        sDescription,
                        sBatchID});
            sSerialNumber = ((string)(results[1]));
            sReloadPin = ((string)(results[2]));
            sExpiryDate = ((string)(results[3]));
            sReloadTelco = ((string)(results[4]));
            sAmount = ((string)(results[5]));
            sDNReceivedID = ((string)(results[6]));
            sInstruction = ((string)(results[7]));
            sDescription = ((string)(results[8]));
            sBatchID = ((string)(results[9]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetReloadPINImmediateAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sSerialNumber, string sReloadPin, string sExpiryDate, string sReloadTelco, string sAmount, string sDNReceivedID, string sInstruction, string sDescription, string sBatchID) {
            this.GetReloadPINImmediateAsync(sClientUserName, sClientPassword, sLocalMOID, sSerialNumber, sReloadPin, sExpiryDate, sReloadTelco, sAmount, sDNReceivedID, sInstruction, sDescription, sBatchID, null);
        }
        
        /// <remarks/>
        public void GetReloadPINImmediateAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sSerialNumber, string sReloadPin, string sExpiryDate, string sReloadTelco, string sAmount, string sDNReceivedID, string sInstruction, string sDescription, string sBatchID, object userState) {
            if ((this.GetReloadPINImmediateOperationCompleted == null)) {
                this.GetReloadPINImmediateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReloadPINImmediateOperationCompleted);
            }
            this.InvokeAsync("GetReloadPINImmediate", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sSerialNumber,
                        sReloadPin,
                        sExpiryDate,
                        sReloadTelco,
                        sAmount,
                        sDNReceivedID,
                        sInstruction,
                        sDescription,
                        sBatchID}, this.GetReloadPINImmediateOperationCompleted, userState);
        }
        
        private void OnGetReloadPINImmediateOperationCompleted(object arg) {
            if ((this.GetReloadPINImmediateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReloadPINImmediateCompleted(this, new GetReloadPINImmediateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintReceipt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PrintReceipt(string sClientUserName, string sClientPassword, string sLocalMOID, string sAccountNumber, ref string sProduct, ref string sPrice, ref string sReferenceNo, ref string sStatus, ref string sProcessTime, ref string sInstruction, ref string sDescription) {
            object[] results = this.Invoke("PrintReceipt", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sAccountNumber,
                        sProduct,
                        sPrice,
                        sReferenceNo,
                        sStatus,
                        sProcessTime,
                        sInstruction,
                        sDescription});
            sProduct = ((string)(results[1]));
            sPrice = ((string)(results[2]));
            sReferenceNo = ((string)(results[3]));
            sStatus = ((string)(results[4]));
            sProcessTime = ((string)(results[5]));
            sInstruction = ((string)(results[6]));
            sDescription = ((string)(results[7]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrintReceiptAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sAccountNumber, string sProduct, string sPrice, string sReferenceNo, string sStatus, string sProcessTime, string sInstruction, string sDescription) {
            this.PrintReceiptAsync(sClientUserName, sClientPassword, sLocalMOID, sAccountNumber, sProduct, sPrice, sReferenceNo, sStatus, sProcessTime, sInstruction, sDescription, null);
        }
        
        /// <remarks/>
        public void PrintReceiptAsync(string sClientUserName, string sClientPassword, string sLocalMOID, string sAccountNumber, string sProduct, string sPrice, string sReferenceNo, string sStatus, string sProcessTime, string sInstruction, string sDescription, object userState) {
            if ((this.PrintReceiptOperationCompleted == null)) {
                this.PrintReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintReceiptOperationCompleted);
            }
            this.InvokeAsync("PrintReceipt", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sLocalMOID,
                        sAccountNumber,
                        sProduct,
                        sPrice,
                        sReferenceNo,
                        sStatus,
                        sProcessTime,
                        sInstruction,
                        sDescription}, this.PrintReceiptOperationCompleted, userState);
        }
        
        private void OnPrintReceiptOperationCompleted(object arg) {
            if ((this.PrintReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintReceiptCompleted(this, new PrintReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckSoftPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSoftPin(string sDeviceID, string sPIN, ref string sProduct, ref string sPrice, ref string sStatus, ref string sDescription) {
            object[] results = this.Invoke("CheckSoftPin", new object[] {
                        sDeviceID,
                        sPIN,
                        sProduct,
                        sPrice,
                        sStatus,
                        sDescription});
            sProduct = ((string)(results[1]));
            sPrice = ((string)(results[2]));
            sStatus = ((string)(results[3]));
            sDescription = ((string)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSoftPinAsync(string sDeviceID, string sPIN, string sProduct, string sPrice, string sStatus, string sDescription) {
            this.CheckSoftPinAsync(sDeviceID, sPIN, sProduct, sPrice, sStatus, sDescription, null);
        }
        
        /// <remarks/>
        public void CheckSoftPinAsync(string sDeviceID, string sPIN, string sProduct, string sPrice, string sStatus, string sDescription, object userState) {
            if ((this.CheckSoftPinOperationCompleted == null)) {
                this.CheckSoftPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSoftPinOperationCompleted);
            }
            this.InvokeAsync("CheckSoftPin", new object[] {
                        sDeviceID,
                        sPIN,
                        sProduct,
                        sPrice,
                        sStatus,
                        sDescription}, this.CheckSoftPinOperationCompleted, userState);
        }
        
        private void OnCheckSoftPinOperationCompleted(object arg) {
            if ((this.CheckSoftPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSoftPinCompleted(this, new CheckSoftPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReloadSoftPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReloadSoftPin(string sDeviceID, string sPIN, string sReloadMSISDN, string sReloadTelco, ref string sStatus, ref string sDescription) {
            object[] results = this.Invoke("ReloadSoftPin", new object[] {
                        sDeviceID,
                        sPIN,
                        sReloadMSISDN,
                        sReloadTelco,
                        sStatus,
                        sDescription});
            sStatus = ((string)(results[1]));
            sDescription = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReloadSoftPinAsync(string sDeviceID, string sPIN, string sReloadMSISDN, string sReloadTelco, string sStatus, string sDescription) {
            this.ReloadSoftPinAsync(sDeviceID, sPIN, sReloadMSISDN, sReloadTelco, sStatus, sDescription, null);
        }
        
        /// <remarks/>
        public void ReloadSoftPinAsync(string sDeviceID, string sPIN, string sReloadMSISDN, string sReloadTelco, string sStatus, string sDescription, object userState) {
            if ((this.ReloadSoftPinOperationCompleted == null)) {
                this.ReloadSoftPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReloadSoftPinOperationCompleted);
            }
            this.InvokeAsync("ReloadSoftPin", new object[] {
                        sDeviceID,
                        sPIN,
                        sReloadMSISDN,
                        sReloadTelco,
                        sStatus,
                        sDescription}, this.ReloadSoftPinOperationCompleted, userState);
        }
        
        private void OnReloadSoftPinOperationCompleted(object arg) {
            if ((this.ReloadSoftPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReloadSoftPinCompleted(this, new ReloadSoftPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ChangePassword(string sClientUserName, string sClientPassword, string sNewPassword) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sNewPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sClientUserName, string sClientPassword, string sNewPassword) {
            this.ChangePasswordAsync(sClientUserName, sClientPassword, sNewPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sClientUserName, string sClientPassword, string sNewPassword, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sNewPassword}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePushNotificationID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePushNotificationID(string sClientUserName, string sClientPassword, string sPNID, string sChannel) {
            object[] results = this.Invoke("UpdatePushNotificationID", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sPNID,
                        sChannel});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePushNotificationIDAsync(string sClientUserName, string sClientPassword, string sPNID, string sChannel) {
            this.UpdatePushNotificationIDAsync(sClientUserName, sClientPassword, sPNID, sChannel, null);
        }
        
        /// <remarks/>
        public void UpdatePushNotificationIDAsync(string sClientUserName, string sClientPassword, string sPNID, string sChannel, object userState) {
            if ((this.UpdatePushNotificationIDOperationCompleted == null)) {
                this.UpdatePushNotificationIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePushNotificationIDOperationCompleted);
            }
            this.InvokeAsync("UpdatePushNotificationID", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sPNID,
                        sChannel}, this.UpdatePushNotificationIDOperationCompleted, userState);
        }
        
        private void OnUpdatePushNotificationIDOperationCompleted(object arg) {
            if ((this.UpdatePushNotificationIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePushNotificationIDCompleted(this, new UpdatePushNotificationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitBankIn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitBankIn(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime) {
            object[] results = this.Invoke("SubmitBankIn", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sBank,
                        sAmount,
                        sDate,
                        sTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitBankInAsync(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime) {
            this.SubmitBankInAsync(sClientUserName, sClientPassword, sBank, sAmount, sDate, sTime, null);
        }
        
        /// <remarks/>
        public void SubmitBankInAsync(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime, object userState) {
            if ((this.SubmitBankInOperationCompleted == null)) {
                this.SubmitBankInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitBankInOperationCompleted);
            }
            this.InvokeAsync("SubmitBankIn", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sBank,
                        sAmount,
                        sDate,
                        sTime}, this.SubmitBankInOperationCompleted, userState);
        }
        
        private void OnSubmitBankInOperationCompleted(object arg) {
            if ((this.SubmitBankInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitBankInCompleted(this, new SubmitBankInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitBankInBiCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitBankInBiCode(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime, string sbiCode) {
            object[] results = this.Invoke("SubmitBankInBiCode", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sBank,
                        sAmount,
                        sDate,
                        sTime,
                        sbiCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitBankInBiCodeAsync(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime, string sbiCode) {
            this.SubmitBankInBiCodeAsync(sClientUserName, sClientPassword, sBank, sAmount, sDate, sTime, sbiCode, null);
        }
        
        /// <remarks/>
        public void SubmitBankInBiCodeAsync(string sClientUserName, string sClientPassword, string sBank, string sAmount, string sDate, string sTime, string sbiCode, object userState) {
            if ((this.SubmitBankInBiCodeOperationCompleted == null)) {
                this.SubmitBankInBiCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitBankInBiCodeOperationCompleted);
            }
            this.InvokeAsync("SubmitBankInBiCode", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sBank,
                        sAmount,
                        sDate,
                        sTime,
                        sbiCode}, this.SubmitBankInBiCodeOperationCompleted, userState);
        }
        
        private void OnSubmitBankInBiCodeOperationCompleted(object arg) {
            if ((this.SubmitBankInBiCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitBankInBiCodeCompleted(this, new SubmitBankInBiCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitServiceRegistration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitServiceRegistration(string sClientUserName, string sClientPassword, string sClientMessageTS, string sEncKey, string sProductName, string sMobileNo, string sICNo, string sName, string sAddress, string sSIMSerialNo, string sDOB, string sRemark1, string sRemark2, string sRemark3, string sRemark4) {
            object[] results = this.Invoke("SubmitServiceRegistration", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientMessageTS,
                        sEncKey,
                        sProductName,
                        sMobileNo,
                        sICNo,
                        sName,
                        sAddress,
                        sSIMSerialNo,
                        sDOB,
                        sRemark1,
                        sRemark2,
                        sRemark3,
                        sRemark4});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitServiceRegistrationAsync(string sClientUserName, string sClientPassword, string sClientMessageTS, string sEncKey, string sProductName, string sMobileNo, string sICNo, string sName, string sAddress, string sSIMSerialNo, string sDOB, string sRemark1, string sRemark2, string sRemark3, string sRemark4) {
            this.SubmitServiceRegistrationAsync(sClientUserName, sClientPassword, sClientMessageTS, sEncKey, sProductName, sMobileNo, sICNo, sName, sAddress, sSIMSerialNo, sDOB, sRemark1, sRemark2, sRemark3, sRemark4, null);
        }
        
        /// <remarks/>
        public void SubmitServiceRegistrationAsync(
                    string sClientUserName, 
                    string sClientPassword, 
                    string sClientMessageTS, 
                    string sEncKey, 
                    string sProductName, 
                    string sMobileNo, 
                    string sICNo, 
                    string sName, 
                    string sAddress, 
                    string sSIMSerialNo, 
                    string sDOB, 
                    string sRemark1, 
                    string sRemark2, 
                    string sRemark3, 
                    string sRemark4, 
                    object userState) {
            if ((this.SubmitServiceRegistrationOperationCompleted == null)) {
                this.SubmitServiceRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitServiceRegistrationOperationCompleted);
            }
            this.InvokeAsync("SubmitServiceRegistration", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sClientMessageTS,
                        sEncKey,
                        sProductName,
                        sMobileNo,
                        sICNo,
                        sName,
                        sAddress,
                        sSIMSerialNo,
                        sDOB,
                        sRemark1,
                        sRemark2,
                        sRemark3,
                        sRemark4}, this.SubmitServiceRegistrationOperationCompleted, userState);
        }
        
        private void OnSubmitServiceRegistrationOperationCompleted(object arg) {
            if ((this.SubmitServiceRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitServiceRegistrationCompleted(this, new SubmitServiceRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAgentServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AgentServerObj GetAgentServer(string ServerKey) {
            object[] results = this.Invoke("GetAgentServer", new object[] {
                        ServerKey});
            return ((AgentServerObj)(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentServerAsync(string ServerKey) {
            this.GetAgentServerAsync(ServerKey, null);
        }
        
        /// <remarks/>
        public void GetAgentServerAsync(string ServerKey, object userState) {
            if ((this.GetAgentServerOperationCompleted == null)) {
                this.GetAgentServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentServerOperationCompleted);
            }
            this.InvokeAsync("GetAgentServer", new object[] {
                        ServerKey}, this.GetAgentServerOperationCompleted, userState);
        }
        
        private void OnGetAgentServerOperationCompleted(object arg) {
            if ((this.GetAgentServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentServerCompleted(this, new GetAgentServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExChangeRateById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeRateObj GetExChangeRateById(int mId) {
            object[] results = this.Invoke("GetExChangeRateById", new object[] {
                        mId});
            return ((ExchangeRateObj)(results[0]));
        }
        
        /// <remarks/>
        public void GetExChangeRateByIdAsync(int mId) {
            this.GetExChangeRateByIdAsync(mId, null);
        }
        
        /// <remarks/>
        public void GetExChangeRateByIdAsync(int mId, object userState) {
            if ((this.GetExChangeRateByIdOperationCompleted == null)) {
                this.GetExChangeRateByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExChangeRateByIdOperationCompleted);
            }
            this.InvokeAsync("GetExChangeRateById", new object[] {
                        mId}, this.GetExChangeRateByIdOperationCompleted, userState);
        }
        
        private void OnGetExChangeRateByIdOperationCompleted(object arg) {
            if ((this.GetExChangeRateByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExChangeRateByIdCompleted(this, new GetExChangeRateByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertMobileMoneymessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertMobileMoneymessage(MobileMoneyMessageObj mobileMoneyMessageObj) {
            object[] results = this.Invoke("InsertMobileMoneymessage", new object[] {
                        mobileMoneyMessageObj});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertMobileMoneymessageAsync(MobileMoneyMessageObj mobileMoneyMessageObj) {
            this.InsertMobileMoneymessageAsync(mobileMoneyMessageObj, null);
        }
        
        /// <remarks/>
        public void InsertMobileMoneymessageAsync(MobileMoneyMessageObj mobileMoneyMessageObj, object userState) {
            if ((this.InsertMobileMoneymessageOperationCompleted == null)) {
                this.InsertMobileMoneymessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertMobileMoneymessageOperationCompleted);
            }
            this.InvokeAsync("InsertMobileMoneymessage", new object[] {
                        mobileMoneyMessageObj}, this.InsertMobileMoneymessageOperationCompleted, userState);
        }
        
        private void OnInsertMobileMoneymessageOperationCompleted(object arg) {
            if ((this.InsertMobileMoneymessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertMobileMoneymessageCompleted(this, new InsertMobileMoneymessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPinTxByDN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerTxStatus GetPinTxByDN(string sClientUserName, string sClientPassword, string sCustomerAccount, string sDNId) {
            object[] results = this.Invoke("GetPinTxByDN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sDNId});
            return ((CustomerTxStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetPinTxByDNAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string sDNId) {
            this.GetPinTxByDNAsync(sClientUserName, sClientPassword, sCustomerAccount, sDNId, null);
        }
        
        /// <remarks/>
        public void GetPinTxByDNAsync(string sClientUserName, string sClientPassword, string sCustomerAccount, string sDNId, object userState) {
            if ((this.GetPinTxByDNOperationCompleted == null)) {
                this.GetPinTxByDNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPinTxByDNOperationCompleted);
            }
            this.InvokeAsync("GetPinTxByDN", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerAccount,
                        sDNId}, this.GetPinTxByDNOperationCompleted, userState);
        }
        
        private void OnGetPinTxByDNOperationCompleted(object arg) {
            if ((this.GetPinTxByDNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPinTxByDNCompleted(this, new GetPinTxByDNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataToReload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataToReload[] GetDataToReload(string sClientUserName, string sTS, string sEncKey, string sReloadTelco, string sRobin) {
            object[] results = this.Invoke("GetDataToReload", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sReloadTelco,
                        sRobin});
            return ((DataToReload[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataToReloadAsync(string sClientUserName, string sTS, string sEncKey, string sReloadTelco, string sRobin) {
            this.GetDataToReloadAsync(sClientUserName, sTS, sEncKey, sReloadTelco, sRobin, null);
        }
        
        /// <remarks/>
        public void GetDataToReloadAsync(string sClientUserName, string sTS, string sEncKey, string sReloadTelco, string sRobin, object userState) {
            if ((this.GetDataToReloadOperationCompleted == null)) {
                this.GetDataToReloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataToReloadOperationCompleted);
            }
            this.InvokeAsync("GetDataToReload", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sReloadTelco,
                        sRobin}, this.GetDataToReloadOperationCompleted, userState);
        }
        
        private void OnGetDataToReloadOperationCompleted(object arg) {
            if ((this.GetDataToReloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataToReloadCompleted(this, new GetDataToReloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDataReload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateDataReload(string sClientUserName, string sTS, string sEncKey, string sReloadTelco, string sGUID, string sLocalMOID, string sDNMsg, string sReloadMSISDN, string sReloadAmount, string sEloadBalance, string msSIMCardID, string sAgentMSISDN, string sCustomerPrice, string sAgentID, string sOtherParameter) {
            object[] results = this.Invoke("UpdateDataReload", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sReloadTelco,
                        sGUID,
                        sLocalMOID,
                        sDNMsg,
                        sReloadMSISDN,
                        sReloadAmount,
                        sEloadBalance,
                        msSIMCardID,
                        sAgentMSISDN,
                        sCustomerPrice,
                        sAgentID,
                        sOtherParameter});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataReloadAsync(string sClientUserName, string sTS, string sEncKey, string sReloadTelco, string sGUID, string sLocalMOID, string sDNMsg, string sReloadMSISDN, string sReloadAmount, string sEloadBalance, string msSIMCardID, string sAgentMSISDN, string sCustomerPrice, string sAgentID, string sOtherParameter) {
            this.UpdateDataReloadAsync(sClientUserName, sTS, sEncKey, sReloadTelco, sGUID, sLocalMOID, sDNMsg, sReloadMSISDN, sReloadAmount, sEloadBalance, msSIMCardID, sAgentMSISDN, sCustomerPrice, sAgentID, sOtherParameter, null);
        }
        
        /// <remarks/>
        public void UpdateDataReloadAsync(
                    string sClientUserName, 
                    string sTS, 
                    string sEncKey, 
                    string sReloadTelco, 
                    string sGUID, 
                    string sLocalMOID, 
                    string sDNMsg, 
                    string sReloadMSISDN, 
                    string sReloadAmount, 
                    string sEloadBalance, 
                    string msSIMCardID, 
                    string sAgentMSISDN, 
                    string sCustomerPrice, 
                    string sAgentID, 
                    string sOtherParameter, 
                    object userState) {
            if ((this.UpdateDataReloadOperationCompleted == null)) {
                this.UpdateDataReloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataReloadOperationCompleted);
            }
            this.InvokeAsync("UpdateDataReload", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sReloadTelco,
                        sGUID,
                        sLocalMOID,
                        sDNMsg,
                        sReloadMSISDN,
                        sReloadAmount,
                        sEloadBalance,
                        msSIMCardID,
                        sAgentMSISDN,
                        sCustomerPrice,
                        sAgentID,
                        sOtherParameter}, this.UpdateDataReloadOperationCompleted, userState);
        }
        
        private void OnUpdateDataReloadOperationCompleted(object arg) {
            if ((this.UpdateDataReloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataReloadCompleted(this, new UpdateDataReloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WhatAppsInput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WhatAppsInput(string sClientUserName, string sClientMessageIn, string sClientMessageTS, string sEncKey, string sRemark, string sOtherParameter, ref string sReplyMessage) {
            object[] results = this.Invoke("WhatAppsInput", new object[] {
                        sClientUserName,
                        sClientMessageIn,
                        sClientMessageTS,
                        sEncKey,
                        sRemark,
                        sOtherParameter,
                        sReplyMessage});
            sReplyMessage = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WhatAppsInputAsync(string sClientUserName, string sClientMessageIn, string sClientMessageTS, string sEncKey, string sRemark, string sOtherParameter, string sReplyMessage) {
            this.WhatAppsInputAsync(sClientUserName, sClientMessageIn, sClientMessageTS, sEncKey, sRemark, sOtherParameter, sReplyMessage, null);
        }
        
        /// <remarks/>
        public void WhatAppsInputAsync(string sClientUserName, string sClientMessageIn, string sClientMessageTS, string sEncKey, string sRemark, string sOtherParameter, string sReplyMessage, object userState) {
            if ((this.WhatAppsInputOperationCompleted == null)) {
                this.WhatAppsInputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWhatAppsInputOperationCompleted);
            }
            this.InvokeAsync("WhatAppsInput", new object[] {
                        sClientUserName,
                        sClientMessageIn,
                        sClientMessageTS,
                        sEncKey,
                        sRemark,
                        sOtherParameter,
                        sReplyMessage}, this.WhatAppsInputOperationCompleted, userState);
        }
        
        private void OnWhatAppsInputOperationCompleted(object arg) {
            if ((this.WhatAppsInputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WhatAppsInputCompleted(this, new WhatAppsInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WhatAppsOutput", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TxOut[] WhatAppsOutput(string sClientUserName, string sTS, string sEncKey) {
            object[] results = this.Invoke("WhatAppsOutput", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey});
            return ((TxOut[])(results[0]));
        }
        
        /// <remarks/>
        public void WhatAppsOutputAsync(string sClientUserName, string sTS, string sEncKey) {
            this.WhatAppsOutputAsync(sClientUserName, sTS, sEncKey, null);
        }
        
        /// <remarks/>
        public void WhatAppsOutputAsync(string sClientUserName, string sTS, string sEncKey, object userState) {
            if ((this.WhatAppsOutputOperationCompleted == null)) {
                this.WhatAppsOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWhatAppsOutputOperationCompleted);
            }
            this.InvokeAsync("WhatAppsOutput", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey}, this.WhatAppsOutputOperationCompleted, userState);
        }
        
        private void OnWhatAppsOutputOperationCompleted(object arg) {
            if ((this.WhatAppsOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WhatAppsOutputCompleted(this, new WhatAppsOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankInList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BankIn[] GetBankInList(string sClientUserName, string sClientPassword, string sTS, string sEncKey) {
            object[] results = this.Invoke("GetBankInList", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sTS,
                        sEncKey});
            return ((BankIn[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBankInListAsync(string sClientUserName, string sClientPassword, string sTS, string sEncKey) {
            this.GetBankInListAsync(sClientUserName, sClientPassword, sTS, sEncKey, null);
        }
        
        /// <remarks/>
        public void GetBankInListAsync(string sClientUserName, string sClientPassword, string sTS, string sEncKey, object userState) {
            if ((this.GetBankInListOperationCompleted == null)) {
                this.GetBankInListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankInListOperationCompleted);
            }
            this.InvokeAsync("GetBankInList", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sTS,
                        sEncKey}, this.GetBankInListOperationCompleted, userState);
        }
        
        private void OnGetBankInListOperationCompleted(object arg) {
            if ((this.GetBankInListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankInListCompleted(this, new GetBankInListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePrintCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePrintCount(string sClientUserName, string sLocalMOID, string sTS, string sEncKey) {
            object[] results = this.Invoke("UpdatePrintCount", new object[] {
                        sClientUserName,
                        sLocalMOID,
                        sTS,
                        sEncKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePrintCountAsync(string sClientUserName, string sLocalMOID, string sTS, string sEncKey) {
            this.UpdatePrintCountAsync(sClientUserName, sLocalMOID, sTS, sEncKey, null);
        }
        
        /// <remarks/>
        public void UpdatePrintCountAsync(string sClientUserName, string sLocalMOID, string sTS, string sEncKey, object userState) {
            if ((this.UpdatePrintCountOperationCompleted == null)) {
                this.UpdatePrintCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePrintCountOperationCompleted);
            }
            this.InvokeAsync("UpdatePrintCount", new object[] {
                        sClientUserName,
                        sLocalMOID,
                        sTS,
                        sEncKey}, this.UpdatePrintCountOperationCompleted, userState);
        }
        
        private void OnUpdatePrintCountOperationCompleted(object arg) {
            if ((this.UpdatePrintCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePrintCountCompleted(this, new UpdatePrintCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendSMS(string sClientUserName, string sClientPassword, string sRecipientMobile, string sMessageBody, string sTS, string sEncKey) {
            object[] results = this.Invoke("SendSMS", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sRecipientMobile,
                        sMessageBody,
                        sTS,
                        sEncKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendSMSAsync(string sClientUserName, string sClientPassword, string sRecipientMobile, string sMessageBody, string sTS, string sEncKey) {
            this.SendSMSAsync(sClientUserName, sClientPassword, sRecipientMobile, sMessageBody, sTS, sEncKey, null);
        }
        
        /// <remarks/>
        public void SendSMSAsync(string sClientUserName, string sClientPassword, string sRecipientMobile, string sMessageBody, string sTS, string sEncKey, object userState) {
            if ((this.SendSMSOperationCompleted == null)) {
                this.SendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSOperationCompleted);
            }
            this.InvokeAsync("SendSMS", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sRecipientMobile,
                        sMessageBody,
                        sTS,
                        sEncKey}, this.SendSMSOperationCompleted, userState);
        }
        
        private void OnSendSMSOperationCompleted(object arg) {
            if ((this.SendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSCompleted(this, new SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBalanceExtra", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBalanceExtra(string sClientUserName, string sClientPassword, string sCustomerMobile, string sDealerID, string sMachineID, string sDateStart, string sDateEnd, ref decimal dBalance, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("CheckBalanceExtra", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerMobile,
                        sDealerID,
                        sMachineID,
                        sDateStart,
                        sDateEnd,
                        dBalance,
                        sResponseID,
                        sResponseStatus});
            dBalance = ((decimal)(results[1]));
            sResponseID = ((string)(results[2]));
            sResponseStatus = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBalanceExtraAsync(string sClientUserName, string sClientPassword, string sCustomerMobile, string sDealerID, string sMachineID, string sDateStart, string sDateEnd, decimal dBalance, string sResponseID, string sResponseStatus) {
            this.CheckBalanceExtraAsync(sClientUserName, sClientPassword, sCustomerMobile, sDealerID, sMachineID, sDateStart, sDateEnd, dBalance, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void CheckBalanceExtraAsync(string sClientUserName, string sClientPassword, string sCustomerMobile, string sDealerID, string sMachineID, string sDateStart, string sDateEnd, decimal dBalance, string sResponseID, string sResponseStatus, object userState) {
            if ((this.CheckBalanceExtraOperationCompleted == null)) {
                this.CheckBalanceExtraOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBalanceExtraOperationCompleted);
            }
            this.InvokeAsync("CheckBalanceExtra", new object[] {
                        sClientUserName,
                        sClientPassword,
                        sCustomerMobile,
                        sDealerID,
                        sMachineID,
                        sDateStart,
                        sDateEnd,
                        dBalance,
                        sResponseID,
                        sResponseStatus}, this.CheckBalanceExtraOperationCompleted, userState);
        }
        
        private void OnCheckBalanceExtraOperationCompleted(object arg) {
            if ((this.CheckBalanceExtraCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBalanceExtraCompleted(this, new CheckBalanceExtraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBalanceExtra", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateBalanceExtra(string sClientUserName, string sClientPassword, decimal dBalance, ref string sResponseID, ref string sResponseStatus) {
            object[] results = this.Invoke("UpdateBalanceExtra", new object[] {
                        sClientUserName,
                        sClientPassword,
                        dBalance,
                        sResponseID,
                        sResponseStatus});
            sResponseID = ((string)(results[1]));
            sResponseStatus = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBalanceExtraAsync(string sClientUserName, string sClientPassword, decimal dBalance, string sResponseID, string sResponseStatus) {
            this.UpdateBalanceExtraAsync(sClientUserName, sClientPassword, dBalance, sResponseID, sResponseStatus, null);
        }
        
        /// <remarks/>
        public void UpdateBalanceExtraAsync(string sClientUserName, string sClientPassword, decimal dBalance, string sResponseID, string sResponseStatus, object userState) {
            if ((this.UpdateBalanceExtraOperationCompleted == null)) {
                this.UpdateBalanceExtraOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBalanceExtraOperationCompleted);
            }
            this.InvokeAsync("UpdateBalanceExtra", new object[] {
                        sClientUserName,
                        sClientPassword,
                        dBalance,
                        sResponseID,
                        sResponseStatus}, this.UpdateBalanceExtraOperationCompleted, userState);
        }
        
        private void OnUpdateBalanceExtraOperationCompleted(object arg) {
            if ((this.UpdateBalanceExtraCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBalanceExtraCompleted(this, new UpdateBalanceExtraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckProgramValidity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckProgramValidity(string sProgramVersion, string sProgramOwner, string sProgramID) {
            object[] results = this.Invoke("CheckProgramValidity", new object[] {
                        sProgramVersion,
                        sProgramOwner,
                        sProgramID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckProgramValidityAsync(string sProgramVersion, string sProgramOwner, string sProgramID) {
            this.CheckProgramValidityAsync(sProgramVersion, sProgramOwner, sProgramID, null);
        }
        
        /// <remarks/>
        public void CheckProgramValidityAsync(string sProgramVersion, string sProgramOwner, string sProgramID, object userState) {
            if ((this.CheckProgramValidityOperationCompleted == null)) {
                this.CheckProgramValidityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProgramValidityOperationCompleted);
            }
            this.InvokeAsync("CheckProgramValidity", new object[] {
                        sProgramVersion,
                        sProgramOwner,
                        sProgramID}, this.CheckProgramValidityOperationCompleted, userState);
        }
        
        private void OnCheckProgramValidityOperationCompleted(object arg) {
            if ((this.CheckProgramValidityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProgramValidityCompleted(this, new CheckProgramValidityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClaimSRSPINServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClaimSRSPINServer(string sClientUserName, string sServerKey, string sAgentID, string sPINnumber, string sTS, string sEncKey, string sDeviceID, string sIPAddress, ref string sResponseMsg) {
            object[] results = this.Invoke("ClaimSRSPINServer", new object[] {
                        sClientUserName,
                        sServerKey,
                        sAgentID,
                        sPINnumber,
                        sTS,
                        sEncKey,
                        sDeviceID,
                        sIPAddress,
                        sResponseMsg});
            sResponseMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClaimSRSPINServerAsync(string sClientUserName, string sServerKey, string sAgentID, string sPINnumber, string sTS, string sEncKey, string sDeviceID, string sIPAddress, string sResponseMsg) {
            this.ClaimSRSPINServerAsync(sClientUserName, sServerKey, sAgentID, sPINnumber, sTS, sEncKey, sDeviceID, sIPAddress, sResponseMsg, null);
        }
        
        /// <remarks/>
        public void ClaimSRSPINServerAsync(string sClientUserName, string sServerKey, string sAgentID, string sPINnumber, string sTS, string sEncKey, string sDeviceID, string sIPAddress, string sResponseMsg, object userState) {
            if ((this.ClaimSRSPINServerOperationCompleted == null)) {
                this.ClaimSRSPINServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClaimSRSPINServerOperationCompleted);
            }
            this.InvokeAsync("ClaimSRSPINServer", new object[] {
                        sClientUserName,
                        sServerKey,
                        sAgentID,
                        sPINnumber,
                        sTS,
                        sEncKey,
                        sDeviceID,
                        sIPAddress,
                        sResponseMsg}, this.ClaimSRSPINServerOperationCompleted, userState);
        }
        
        private void OnClaimSRSPINServerOperationCompleted(object arg) {
            if ((this.ClaimSRSPINServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClaimSRSPINServerCompleted(this, new ClaimSRSPINServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProcessorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetProcessorInfo(string sClientUserName, string sTS, string sEncKey, string sProcessorID, ref string sSIMCardID, ref string sPIN, ref string sPasscode, ref string sModemPort) {
            object[] results = this.Invoke("GetProcessorInfo", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sProcessorID,
                        sSIMCardID,
                        sPIN,
                        sPasscode,
                        sModemPort});
            sSIMCardID = ((string)(results[1]));
            sPIN = ((string)(results[2]));
            sPasscode = ((string)(results[3]));
            sModemPort = ((string)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessorInfoAsync(string sClientUserName, string sTS, string sEncKey, string sProcessorID, string sSIMCardID, string sPIN, string sPasscode, string sModemPort) {
            this.GetProcessorInfoAsync(sClientUserName, sTS, sEncKey, sProcessorID, sSIMCardID, sPIN, sPasscode, sModemPort, null);
        }
        
        /// <remarks/>
        public void GetProcessorInfoAsync(string sClientUserName, string sTS, string sEncKey, string sProcessorID, string sSIMCardID, string sPIN, string sPasscode, string sModemPort, object userState) {
            if ((this.GetProcessorInfoOperationCompleted == null)) {
                this.GetProcessorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessorInfoOperationCompleted);
            }
            this.InvokeAsync("GetProcessorInfo", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sProcessorID,
                        sSIMCardID,
                        sPIN,
                        sPasscode,
                        sModemPort}, this.GetProcessorInfoOperationCompleted, userState);
        }
        
        private void OnGetProcessorInfoOperationCompleted(object arg) {
            if ((this.GetProcessorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessorInfoCompleted(this, new GetProcessorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTxOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TxOut[] GetTxOut(string sClientUserName, string sTS, string sEncKey, string sAgentID, string sStartDate, string sEndDate) {
            object[] results = this.Invoke("GetTxOut", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sStartDate,
                        sEndDate});
            return ((TxOut[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTxOutAsync(string sClientUserName, string sTS, string sEncKey, string sAgentID, string sStartDate, string sEndDate) {
            this.GetTxOutAsync(sClientUserName, sTS, sEncKey, sAgentID, sStartDate, sEndDate, null);
        }
        
        /// <remarks/>
        public void GetTxOutAsync(string sClientUserName, string sTS, string sEncKey, string sAgentID, string sStartDate, string sEndDate, object userState) {
            if ((this.GetTxOutOperationCompleted == null)) {
                this.GetTxOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTxOutOperationCompleted);
            }
            this.InvokeAsync("GetTxOut", new object[] {
                        sClientUserName,
                        sTS,
                        sEncKey,
                        sAgentID,
                        sStartDate,
                        sEndDate}, this.GetTxOutOperationCompleted, userState);
        }
        
        private void OnGetTxOutOperationCompleted(object arg) {
            if ((this.GetTxOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTxOutCompleted(this, new GetTxOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessageInfoList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MessageInfo[] GetMessageInfoList(string sClientUserName, string sClientPassword) {
            object[] results = this.Invoke("GetMessageInfoList", new object[] {
                        sClientUserName,
                        sClientPassword});
            return ((MessageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageInfoListAsync(string sClientUserName, string sClientPassword) {
            this.GetMessageInfoListAsync(sClientUserName, sClientPassword, null);
        }
        
        /// <remarks/>
        public void GetMessageInfoListAsync(string sClientUserName, string sClientPassword, object userState) {
            if ((this.GetMessageInfoListOperationCompleted == null)) {
                this.GetMessageInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageInfoListOperationCompleted);
            }
            this.InvokeAsync("GetMessageInfoList", new object[] {
                        sClientUserName,
                        sClientPassword}, this.GetMessageInfoListOperationCompleted, userState);
        }
        
        private void OnGetMessageInfoListOperationCompleted(object arg) {
            if ((this.GetMessageInfoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageInfoListCompleted(this, new GetMessageInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TransactionStatus {
        
        private string clientTxIDField;
        
        private string productIDField;
        
        private string transactionStatus2Field;
        
        private string transactionErrorCodeField;
        
        private string responseIDField;
        
        private string responseStatusField;
        
        private string transactionDNReceivedIDField;
        
        private string reloadTelcoField;
        
        private string reloadAmountField;
        
        private string reloadTypeField;
        
        private string reloadMSISDNField;
        
        private string currentRetryField;
        
        private string orderIDField;
        
        private string agentIDField;
        
        /// <remarks/>
        public string ClientTxID {
            get {
                return this.clientTxIDField;
            }
            set {
                this.clientTxIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductID {
            get {
                return this.productIDField;
            }
            set {
                this.productIDField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionStatus2 {
            get {
                return this.transactionStatus2Field;
            }
            set {
                this.transactionStatus2Field = value;
            }
        }
        
        /// <remarks/>
        public string TransactionErrorCode {
            get {
                return this.transactionErrorCodeField;
            }
            set {
                this.transactionErrorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseID {
            get {
                return this.responseIDField;
            }
            set {
                this.responseIDField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseStatus {
            get {
                return this.responseStatusField;
            }
            set {
                this.responseStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionDNReceivedID {
            get {
                return this.transactionDNReceivedIDField;
            }
            set {
                this.transactionDNReceivedIDField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadTelco {
            get {
                return this.reloadTelcoField;
            }
            set {
                this.reloadTelcoField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadAmount {
            get {
                return this.reloadAmountField;
            }
            set {
                this.reloadAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadType {
            get {
                return this.reloadTypeField;
            }
            set {
                this.reloadTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadMSISDN {
            get {
                return this.reloadMSISDNField;
            }
            set {
                this.reloadMSISDNField = value;
            }
        }
        
        /// <remarks/>
        public string CurrentRetry {
            get {
                return this.currentRetryField;
            }
            set {
                this.currentRetryField = value;
            }
        }
        
        /// <remarks/>
        public string OrderID {
            get {
                return this.orderIDField;
            }
            set {
                this.orderIDField = value;
            }
        }
        
        /// <remarks/>
        public string AgentID {
            get {
                return this.agentIDField;
            }
            set {
                this.agentIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MessageInfo {
        
        private string msgTypeField;
        
        private string msgContentField;
        
        private string msgFeeField;
        
        /// <remarks/>
        public string MsgType {
            get {
                return this.msgTypeField;
            }
            set {
                this.msgTypeField = value;
            }
        }
        
        /// <remarks/>
        public string MsgContent {
            get {
                return this.msgContentField;
            }
            set {
                this.msgContentField = value;
            }
        }
        
        /// <remarks/>
        public string MsgFee {
            get {
                return this.msgFeeField;
            }
            set {
                this.msgFeeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BankIn {
        
        private string bankField;
        
        private string amountField;
        
        private string dateBIField;
        
        private string timeField;
        
        private string statusField;
        
        private string recipientReferenceField;
        
        private string createdField;
        
        /// <remarks/>
        public string Bank {
            get {
                return this.bankField;
            }
            set {
                this.bankField = value;
            }
        }
        
        /// <remarks/>
        public string Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public string DateBI {
            get {
                return this.dateBIField;
            }
            set {
                this.dateBIField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string RecipientReference {
            get {
                return this.recipientReferenceField;
            }
            set {
                this.recipientReferenceField = value;
            }
        }
        
        /// <remarks/>
        public string Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TxOut {
        
        private string msgIDField;
        
        private string msgMSISDNField;
        
        private string msgContentField;
        
        private string msgTSField;
        
        /// <remarks/>
        public string MsgID {
            get {
                return this.msgIDField;
            }
            set {
                this.msgIDField = value;
            }
        }
        
        /// <remarks/>
        public string MsgMSISDN {
            get {
                return this.msgMSISDNField;
            }
            set {
                this.msgMSISDNField = value;
            }
        }
        
        /// <remarks/>
        public string MsgContent {
            get {
                return this.msgContentField;
            }
            set {
                this.msgContentField = value;
            }
        }
        
        /// <remarks/>
        public string MsgTS {
            get {
                return this.msgTSField;
            }
            set {
                this.msgTSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DataToReload {
        
        private string gUIDField;
        
        private string localMOIdField;
        
        private string reloadMSISDNField;
        
        private string reloadAmountField;
        
        private string reloadTypeField;
        
        private string retryField;
        
        private string reloadTelcoField;
        
        private string agentMSISDNField;
        
        private string customerPriceField;
        
        private string agentIDField;
        
        /// <remarks/>
        public string GUID {
            get {
                return this.gUIDField;
            }
            set {
                this.gUIDField = value;
            }
        }
        
        /// <remarks/>
        public string LocalMOId {
            get {
                return this.localMOIdField;
            }
            set {
                this.localMOIdField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadMSISDN {
            get {
                return this.reloadMSISDNField;
            }
            set {
                this.reloadMSISDNField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadAmount {
            get {
                return this.reloadAmountField;
            }
            set {
                this.reloadAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadType {
            get {
                return this.reloadTypeField;
            }
            set {
                this.reloadTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Retry {
            get {
                return this.retryField;
            }
            set {
                this.retryField = value;
            }
        }
        
        /// <remarks/>
        public string ReloadTelco {
            get {
                return this.reloadTelcoField;
            }
            set {
                this.reloadTelcoField = value;
            }
        }
        
        /// <remarks/>
        public string AgentMSISDN {
            get {
                return this.agentMSISDNField;
            }
            set {
                this.agentMSISDNField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerPrice {
            get {
                return this.customerPriceField;
            }
            set {
                this.customerPriceField = value;
            }
        }
        
        /// <remarks/>
        public string AgentID {
            get {
                return this.agentIDField;
            }
            set {
                this.agentIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MobileMoneyMessageObj {
        
        private int mIDField;
        
        private string sMessageField;
        
        private string messageStatusField;
        
        private System.DateTime createdDateField;
        
        private int agentIdField;
        
        private string mSISDNField;
        
        /// <remarks/>
        public int MID {
            get {
                return this.mIDField;
            }
            set {
                this.mIDField = value;
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                return this.sMessageField;
            }
            set {
                this.sMessageField = value;
            }
        }
        
        /// <remarks/>
        public string MessageStatus {
            get {
                return this.messageStatusField;
            }
            set {
                this.messageStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public int AgentId {
            get {
                return this.agentIdField;
            }
            set {
                this.agentIdField = value;
            }
        }
        
        /// <remarks/>
        public string MSISDN {
            get {
                return this.mSISDNField;
            }
            set {
                this.mSISDNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ExchangeRateObj {
        
        private int mIDField;
        
        private string localCountryField;
        
        private string localCurrencyField;
        
        private decimal localAmountField;
        
        private string foreignCountryField;
        
        private string foreignCurrencyField;
        
        private decimal foreignAmountField;
        
        private string statusField;
        
        private System.DateTime lastUpdatedField;
        
        private System.DateTime createdField;
        
        /// <remarks/>
        public int mID {
            get {
                return this.mIDField;
            }
            set {
                this.mIDField = value;
            }
        }
        
        /// <remarks/>
        public string LocalCountry {
            get {
                return this.localCountryField;
            }
            set {
                this.localCountryField = value;
            }
        }
        
        /// <remarks/>
        public string LocalCurrency {
            get {
                return this.localCurrencyField;
            }
            set {
                this.localCurrencyField = value;
            }
        }
        
        /// <remarks/>
        public decimal LocalAmount {
            get {
                return this.localAmountField;
            }
            set {
                this.localAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ForeignCountry {
            get {
                return this.foreignCountryField;
            }
            set {
                this.foreignCountryField = value;
            }
        }
        
        /// <remarks/>
        public string ForeignCurrency {
            get {
                return this.foreignCurrencyField;
            }
            set {
                this.foreignCurrencyField = value;
            }
        }
        
        /// <remarks/>
        public decimal ForeignAmount {
            get {
                return this.foreignAmountField;
            }
            set {
                this.foreignAmountField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                this.lastUpdatedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AgentServerObj {
        
        private int serverIDField;
        
        private string serverNameField;
        
        private string bank1Field;
        
        private string account1Field;
        
        private string bank2Field;
        
        private string account2Field;
        
        private string bank3Field;
        
        private string account3Field;
        
        private string uRLField;
        
        private int statusField;
        
        private string gCM_Sender_IDField;
        
        private int allow_PNField;
        
        private string server_KeyField;
        
        private string accountNameField;
        
        private string helplineField;
        
        private string appIconURLField;
        
        private string colorField;
        
        private string mOMobileNumberField;
        
        private string iOSEnableField;
        
        private string keyField;
        
        /// <remarks/>
        public int ServerID {
            get {
                return this.serverIDField;
            }
            set {
                this.serverIDField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public string Bank1 {
            get {
                return this.bank1Field;
            }
            set {
                this.bank1Field = value;
            }
        }
        
        /// <remarks/>
        public string Account1 {
            get {
                return this.account1Field;
            }
            set {
                this.account1Field = value;
            }
        }
        
        /// <remarks/>
        public string Bank2 {
            get {
                return this.bank2Field;
            }
            set {
                this.bank2Field = value;
            }
        }
        
        /// <remarks/>
        public string Account2 {
            get {
                return this.account2Field;
            }
            set {
                this.account2Field = value;
            }
        }
        
        /// <remarks/>
        public string Bank3 {
            get {
                return this.bank3Field;
            }
            set {
                this.bank3Field = value;
            }
        }
        
        /// <remarks/>
        public string Account3 {
            get {
                return this.account3Field;
            }
            set {
                this.account3Field = value;
            }
        }
        
        /// <remarks/>
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string GCM_Sender_ID {
            get {
                return this.gCM_Sender_IDField;
            }
            set {
                this.gCM_Sender_IDField = value;
            }
        }
        
        /// <remarks/>
        public int Allow_PN {
            get {
                return this.allow_PNField;
            }
            set {
                this.allow_PNField = value;
            }
        }
        
        /// <remarks/>
        public string Server_Key {
            get {
                return this.server_KeyField;
            }
            set {
                this.server_KeyField = value;
            }
        }
        
        /// <remarks/>
        public string AccountName {
            get {
                return this.accountNameField;
            }
            set {
                this.accountNameField = value;
            }
        }
        
        /// <remarks/>
        public string Helpline {
            get {
                return this.helplineField;
            }
            set {
                this.helplineField = value;
            }
        }
        
        /// <remarks/>
        public string AppIconURL {
            get {
                return this.appIconURLField;
            }
            set {
                this.appIconURLField = value;
            }
        }
        
        /// <remarks/>
        public string Color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        /// <remarks/>
        public string MOMobileNumber {
            get {
                return this.mOMobileNumberField;
            }
            set {
                this.mOMobileNumberField = value;
            }
        }
        
        /// <remarks/>
        public string IOSEnable {
            get {
                return this.iOSEnableField;
            }
            set {
                this.iOSEnableField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AgentSales {
        
        private string productNameField;
        
        private string totalSalesField;
        
        private string totalProfitField;
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string TotalSales {
            get {
                return this.totalSalesField;
            }
            set {
                this.totalSalesField = value;
            }
        }
        
        /// <remarks/>
        public string TotalProfit {
            get {
                return this.totalProfitField;
            }
            set {
                this.totalProfitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CustomerInputList {
        
        private string txIDField;
        
        private string productIDField;
        
        private string productNameField;
        
        private decimal productPriceField;
        
        private string customerAccountNumberField;
        
        private string customerMobileNumberField;
        
        private string statusField;
        
        private string ticketNumberField;
        
        /// <remarks/>
        public string TxID {
            get {
                return this.txIDField;
            }
            set {
                this.txIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductID {
            get {
                return this.productIDField;
            }
            set {
                this.productIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public decimal ProductPrice {
            get {
                return this.productPriceField;
            }
            set {
                this.productPriceField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerAccountNumber {
            get {
                return this.customerAccountNumberField;
            }
            set {
                this.customerAccountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerMobileNumber {
            get {
                return this.customerMobileNumberField;
            }
            set {
                this.customerMobileNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string TicketNumber {
            get {
                return this.ticketNumberField;
            }
            set {
                this.ticketNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CustomerTxStatus {
        
        private string localMOIDField;
        
        private string productField;
        
        private string amountField;
        
        private string statusField;
        
        private string dnField;
        
        private string codeField;
        
        private string dateTimeField;
        
        private string retailPriceField;
        
        private string sReloadMSISDNField;
        
        private string retryField;
        
        /// <remarks/>
        public string LocalMOID {
            get {
                return this.localMOIDField;
            }
            set {
                this.localMOIDField = value;
            }
        }
        
        /// <remarks/>
        public string Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        public string Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string DN {
            get {
                return this.dnField;
            }
            set {
                this.dnField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string RetailPrice {
            get {
                return this.retailPriceField;
            }
            set {
                this.retailPriceField = value;
            }
        }
        
        /// <remarks/>
        public string sReloadMSISDN {
            get {
                return this.sReloadMSISDNField;
            }
            set {
                this.sReloadMSISDNField = value;
            }
        }
        
        /// <remarks/>
        public string Retry {
            get {
                return this.retryField;
            }
            set {
                this.retryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AgentProductRebate {
        
        private string productIDField;
        
        private string productNameField;
        
        private string denominationField;
        
        private string rebateTypeField;
        
        private string rebateRateField;
        
        private string lastUpdatedField;
        
        /// <remarks/>
        public string ProductID {
            get {
                return this.productIDField;
            }
            set {
                this.productIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string Denomination {
            get {
                return this.denominationField;
            }
            set {
                this.denominationField = value;
            }
        }
        
        /// <remarks/>
        public string RebateType {
            get {
                return this.rebateTypeField;
            }
            set {
                this.rebateTypeField = value;
            }
        }
        
        /// <remarks/>
        public string RebateRate {
            get {
                return this.rebateRateField;
            }
            set {
                this.rebateRateField = value;
            }
        }
        
        /// <remarks/>
        public string LastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                this.lastUpdatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AgentProductDiscount {
        
        private string productIDField;
        
        private string productNameField;
        
        private string discountTypeField;
        
        private string discountRateField;
        
        private string lastUpdatedField;
        
        /// <remarks/>
        public string ProductID {
            get {
                return this.productIDField;
            }
            set {
                this.productIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string DiscountType {
            get {
                return this.discountTypeField;
            }
            set {
                this.discountTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DiscountRate {
            get {
                return this.discountRateField;
            }
            set {
                this.discountRateField = value;
            }
        }
        
        /// <remarks/>
        public string LastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                this.lastUpdatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProductInfo {
        
        private string idField;
        
        private string nameField;
        
        private string keywordField;
        
        private string denominationField;
        
        private string denominationDescriptionField;
        
        private string descriptionField;
        
        private string instructionField;
        
        private string statusField;
        
        private string mobileLengthField;
        
        private string taxField;
        
        private string costField;
        
        private string sortingField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Keyword {
            get {
                return this.keywordField;
            }
            set {
                this.keywordField = value;
            }
        }
        
        /// <remarks/>
        public string Denomination {
            get {
                return this.denominationField;
            }
            set {
                this.denominationField = value;
            }
        }
        
        /// <remarks/>
        public string DenominationDescription {
            get {
                return this.denominationDescriptionField;
            }
            set {
                this.denominationDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Instruction {
            get {
                return this.instructionField;
            }
            set {
                this.instructionField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string MobileLength {
            get {
                return this.mobileLengthField;
            }
            set {
                this.mobileLengthField = value;
            }
        }
        
        /// <remarks/>
        public string Tax {
            get {
                return this.taxField;
            }
            set {
                this.taxField = value;
            }
        }
        
        /// <remarks/>
        public string Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
        
        /// <remarks/>
        public string Sorting {
            get {
                return this.sortingField;
            }
            set {
                this.sortingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RequestInputCompletedEventHandler(object sender, RequestInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RequestTopupCompletedEventHandler(object sender, RequestTopupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestTopupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestTopupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckBalanceCompletedEventHandler(object sender, CheckBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public decimal dBalance {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckTransactionStatusCompletedEventHandler(object sender, CheckTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sTransactionStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sTransactionErrorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sTransactionDNReceivedID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckTransactionStatusBatchCompletedEventHandler(object sender, CheckTransactionStatusBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTransactionStatusBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTransactionStatusBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransactionStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RequestPINCompletedEventHandler(object sender, RequestPINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestPINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestPINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sSerialNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sSoftPIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sInstruction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetProductCompletedEventHandler(object sender, GetProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] sProductID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] sProductName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string[] sProductDenomination {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string[] sProductDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string[] sProductInstruction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string[] sProductStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetProductObjectCompletedEventHandler(object sender, GetProductObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAgentProductDiscountCompletedEventHandler(object sender, GetAgentProductDiscountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentProductDiscountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentProductDiscountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AgentProductDiscount[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AgentProductDiscount[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAgentProductRebateCompletedEventHandler(object sender, GetAgentProductRebateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentProductRebateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentProductRebateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AgentProductRebate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AgentProductRebate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetRecentTransactionCompletedEventHandler(object sender, GetRecentTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecentTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecentTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] sReloadNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] sReloadAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string[] sStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string[] sDN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string[] sReloadTelco {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string[] sCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeviceLoginCompletedEventHandler(object sender, DeviceLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sClientID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool bVerifyTac {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sMasterID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sMerchantName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void DeviceVerifyTACCompletedEventHandler(object sender, DeviceVerifyTACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceVerifyTACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceVerifyTACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckCustomerStatusCompletedEventHandler(object sender, CheckCustomerStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCustomerStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCustomerStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] sProduct {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string[] sAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string[] sStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string[] sDN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string[] sCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckCustomerTxStatusCompletedEventHandler(object sender, CheckCustomerTxStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCustomerTxStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCustomerTxStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerTxStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerTxStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RegisterDealerCompletedEventHandler(object sender, RegisterDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FBLoginCompletedEventHandler(object sender, FBLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FBLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FBLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sAgentID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMSISDN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool bTACverified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sPassword {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sResponseMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FBUpdateFBIDCompletedEventHandler(object sender, FBUpdateFBIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FBUpdateFBIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FBUpdateFBIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void FBUpdateMSISDNCompletedEventHandler(object sender, FBUpdateMSISDNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FBUpdateMSISDNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FBUpdateMSISDNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool bTACverified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CustomerInputCompletedEventHandler(object sender, CustomerInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sTicketNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CustomerInputListCompletedEventHandler(object sender, CustomerInputListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerInputListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerInputListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerInputList[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerInputList[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CustomerInputApproveCompletedEventHandler(object sender, CustomerInputApproveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerInputApproveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerInputApproveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sTxID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAgentSalesCompletedEventHandler(object sender, GetAgentSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AgentSales[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AgentSales[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAgentSalesProfitCompletedEventHandler(object sender, GetAgentSalesProfitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentSalesProfitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentSalesProfitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMessageInfoCompletedEventHandler(object sender, GetMessageInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LogLoginCompletedEventHandler(object sender, LogLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetReloadPINCompletedEventHandler(object sender, GetReloadPINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReloadPINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReloadPINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sReloadPin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sExpiryDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sReloadTelco {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string sInstruction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string sPurchaseTS {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string sPINID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string sRetailPrice {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetReloadPINImmediateCompletedEventHandler(object sender, GetReloadPINImmediateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReloadPINImmediateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReloadPINImmediateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sSerialNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sReloadPin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sExpiryDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sReloadTelco {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sAmount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string sDNReceivedID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string sInstruction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string sBatchID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PrintReceiptCompletedEventHandler(object sender, PrintReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sProduct {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sPrice {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sReferenceNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sProcessTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string sInstruction {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckSoftPinCompletedEventHandler(object sender, CheckSoftPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSoftPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSoftPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sProduct {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sPrice {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ReloadSoftPinCompletedEventHandler(object sender, ReloadSoftPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReloadSoftPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReloadSoftPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sDescription {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdatePushNotificationIDCompletedEventHandler(object sender, UpdatePushNotificationIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePushNotificationIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePushNotificationIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SubmitBankInCompletedEventHandler(object sender, SubmitBankInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitBankInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitBankInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SubmitBankInBiCodeCompletedEventHandler(object sender, SubmitBankInBiCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitBankInBiCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitBankInBiCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SubmitServiceRegistrationCompletedEventHandler(object sender, SubmitServiceRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitServiceRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitServiceRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAgentServerCompletedEventHandler(object sender, GetAgentServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AgentServerObj Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AgentServerObj)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetExChangeRateByIdCompletedEventHandler(object sender, GetExChangeRateByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExChangeRateByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExChangeRateByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeRateObj Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeRateObj)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void InsertMobileMoneymessageCompletedEventHandler(object sender, InsertMobileMoneymessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertMobileMoneymessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertMobileMoneymessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetPinTxByDNCompletedEventHandler(object sender, GetPinTxByDNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPinTxByDNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPinTxByDNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerTxStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerTxStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDataToReloadCompletedEventHandler(object sender, GetDataToReloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataToReloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataToReloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataToReload[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataToReload[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateDataReloadCompletedEventHandler(object sender, UpdateDataReloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataReloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataReloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void WhatAppsInputCompletedEventHandler(object sender, WhatAppsInputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WhatAppsInputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WhatAppsInputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sReplyMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void WhatAppsOutputCompletedEventHandler(object sender, WhatAppsOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WhatAppsOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WhatAppsOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TxOut[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TxOut[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetBankInListCompletedEventHandler(object sender, GetBankInListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankInListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankInListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BankIn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BankIn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdatePrintCountCompletedEventHandler(object sender, UpdatePrintCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePrintCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePrintCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SendSMSCompletedEventHandler(object sender, SendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckBalanceExtraCompletedEventHandler(object sender, CheckBalanceExtraCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBalanceExtraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBalanceExtraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public decimal dBalance {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateBalanceExtraCompletedEventHandler(object sender, UpdateBalanceExtraCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBalanceExtraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBalanceExtraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sResponseStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckProgramValidityCompletedEventHandler(object sender, CheckProgramValidityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProgramValidityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckProgramValidityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ClaimSRSPINServerCompletedEventHandler(object sender, ClaimSRSPINServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClaimSRSPINServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClaimSRSPINServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResponseMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetProcessorInfoCompletedEventHandler(object sender, GetProcessorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sSIMCardID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sPIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sPasscode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sModemPort {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTxOutCompletedEventHandler(object sender, GetTxOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTxOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTxOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TxOut[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TxOut[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMessageInfoListCompletedEventHandler(object sender, GetMessageInfoListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MessageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageInfo[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591